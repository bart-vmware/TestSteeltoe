abstract Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.Type.get -> string
abstract Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.CreateContainerInstance() -> C
abstract Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.CreateConnection() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
abstract Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.DetermineCurrentLookupKey() -> object
abstract Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.ServiceName.get -> string
abstract Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.ServiceName.set -> void
abstract Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DoInitialize() -> void
abstract Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DoShutdown() -> void
abstract Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.CreateMessageListener(Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer container) -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
abstract Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.OnMessage(Steeltoe.Messaging.IMessage message, RabbitMQ.Client.IModel channel) -> void
abstract Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.CreateMessage(object payload, Steeltoe.Messaging.IMessageHeaders messageProperties, object conversionHint) -> Steeltoe.Messaging.IMessage
abstract Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage message, System.Type targetClass, object conversionHint) -> object
abstract Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.ServiceName.get -> string
abstract Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.ServiceName.set -> void
abstract Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.GetCompressorStream(System.IO.Stream stream) -> System.IO.Stream
abstract Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.GetEncoding() -> string
abstract Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor.GetDeCompressorStream(System.IO.Stream stream) -> System.IO.Stream
abstract Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor.GetEncoding() -> string
const Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.DEFAULT_SERVICE_NAME = "rabbitListenerContainerFactory" -> string
const Steeltoe.Messaging.RabbitMQ.Config.ExchangeType.DIRECT = "direct" -> string
const Steeltoe.Messaging.RabbitMQ.Config.ExchangeType.FANOUT = "fanout" -> string
const Steeltoe.Messaging.RabbitMQ.Config.ExchangeType.HEADERS = "headers" -> string
const Steeltoe.Messaging.RabbitMQ.Config.ExchangeType.SYSTEM = "system" -> string
const Steeltoe.Messaging.RabbitMQ.Config.ExchangeType.TOPIC = "topic" -> string
const Steeltoe.Messaging.RabbitMQ.Config.Queue.X_QUEUE_MASTER_LOCATOR = "x-queue-master-locator" -> string
const Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.DEFAULT_SERVICE_NAME = "RabbitListenerAttributeProcessor" -> string
const Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DEFAULT_HOST = "localhost" -> string
const Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DEFAULT_PASSWORD = "guest" -> string
const Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DEFAULT_PORT = 5672 -> int
const Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DEFAULT_USERNAME = "guest" -> string
const Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.PREFIX = "spring:rabbitmq" -> string
const Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.DEFAULT_CLOSE_TIMEOUT = 30000 -> int
const Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.DEFAULT_SERVICE_NAME = "ccFactory" -> string
const Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.RETURNED_MESSAGE_CORRELATION_KEY = "spring_returned_message_correlation" -> string
const Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.RETURN_LISTENER_CORRELATION_KEY = "spring_listener_return_correlation" -> string
const Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.RETURN_LISTENER_ERROR = "No 'spring_listener_return_correlation' header in returned message" -> string
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.ChannelClose_ClassId = 20 -> ushort
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.ChannelClose_MethodId = 40 -> ushort
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.Command_Invalid = 503 -> int
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.ConnectionClose_ClassId = 10 -> ushort
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.ConnectionClose_MethodId = 50 -> ushort
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.Declare_MethodId = 10 -> ushort
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.Exchange_ClassId = 40 -> ushort
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.NotFound = 404 -> int
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.Precondition_Failed = 406 -> int
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.Queue_ClassId = 50 -> ushort
const Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.ReplySuccess = 200 -> int
const Steeltoe.Messaging.RabbitMQ.Core.Address.AMQ_RABBITMQ_REPLY_TO = "amq.rabbitmq.reply-to" -> string
const Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.DEFAULT_SERVICE_NAME = "rabbitAdmin" -> string
const Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.QUEUE_CONSUMER_COUNT = "QUEUE_CONSUMER_COUNT" -> string
const Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.QUEUE_MESSAGE_COUNT = "QUEUE_MESSAGE_COUNT" -> string
const Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.QUEUE_NAME = "QUEUE_NAME" -> string
const Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DEFAULT_SERVICE_NAME = "rabbitTemplate" -> string
const Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DEFAULT_DEBATCHING_ENABLED = true -> bool
const Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DEFAULT_FAILED_DECLARATION_RETRY_INTERVAL = 5000 -> int
const Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DEFAULT_PREFETCH_COUNT = 250 -> int
const Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DEFAULT_RECOVERY_INTERVAL = 5000 -> int
const Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DEFAULT_SHUTDOWN_TIMEOUT = 5000 -> long
const Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.ORIGINAL_DEFAULT_LISTENER_METHOD = "HandleMessage" -> string
const Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.DEFAULT_SERVICE_NAME = "ConditionalRejectingErrorHandler" -> string
const Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.DEFAULT_ACK_TIMEOUT = 20000 -> int
const Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.DEFAULT_MONITOR_INTERVAL = 10000 -> int
const Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.START_WAIT_TIME = 60 -> int
const Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.DEFAULT_SERVICE_NAME = "RabbitListenerEndpointRegistrar" -> string
const Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.DEFAULT_SERVICE_NAME = "RabbitListenerEndpointRegistry" -> string
const Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory.DEFAULT_SERVICE_NAME = "RabbitMessageHandlerMethodFactory" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.APP_ID = "rabbit_appId" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.BATCH_FORMAT_LENGTH_HEADER4 = "lengthHeader4" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.BATCH_SIZE = "amqp_batchSize" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.CHANNEL = "internal_channel" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.CLUSTER_ID = "rabbit_clusterId" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.CONSUMER_QUEUE = "internal_consumerQueue" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.CONSUMER_TAG = "internal_consumerTag" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.CONTENT_ENCODING = "rabbit_contentEncoding" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.CONTENT_LENGTH = "internal_contentLength" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.CONTENT_TYPE = "contentType" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.CORRELATION_ID = "rabbit_correlationId" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.DELAY = "rabbit_delay" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.DELIVERY_MODE = "rabbit_deliveryMode" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.DELIVERY_TAG = "rabbit_deliveryTag" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.EXPIRATION = "rabbit_expiration" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.FINAL_RETRY_FOR_MESSAGE_WITH_NO_ID = "internal_FinalRetryForMessageWithNoID" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.LAST_IN_BATCH = "amqp_lastInBatch" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.MESSAGE_COUNT = "internal_messageCount" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.MESSAGE_ID = "rabbit_messageId" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.PREFIX = "amqp_" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.PRIORITY = "rabbit_priority" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.PUBLISH_CONFIRM = "amqp_publishConfirm" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.PUBLISH_CONFIRM_CORRELATION = "amqp__publishConfirmCorrelation" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.PUBLISH_CONFIRM_NACK_CAUSE = "amqp_publishConfirmNackCause" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.PUBLISH_SEQUENCE_NUMBER = "internal_PublishSequenceNumber" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RABBIT_PROPERTY = "rabbit_" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RAW_MESSAGE = "amqp_raw_message" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RECEIVED_DELAY = "rabbit_receivedDelay" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RECEIVED_DELIVERY_MODE = "rabbit_receivedDeliveryMode" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RECEIVED_EXCHANGE = "rabbit_receivedExchange" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RECEIVED_ROUTING_KEY = "rabbit_receivedRoutingKey" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RECEIVED_USER_ID = "rabbit_receivedUserId" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.REDELIVERED = "rabbit_redelivered" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.REPLY_TO = "rabbit_replyTo" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RETURN_EXCHANGE = "amqp_returnExchange" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RETURN_REPLY_CODE = "amqp_returnReplyCode" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RETURN_REPLY_TEXT = "amqp_returnReplyText" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.RETURN_ROUTING_KEY = "amqp_returnRoutingKey" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.SPRING_AUTO_DECOMPRESS = "springAutoDecompress" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.SPRING_BATCH_FORMAT = "springBatchFormat" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.SPRING_REPLY_CORRELATION = "spring_reply_correlation" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.SPRING_REPLY_TO_STACK = "spring_reply_to" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.TARGET = "internal_Target" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.TARGET_METHOD = "internal_TargetMethod" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.TIMESTAMP = "rabbit_timestamp" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.TYPE = "rabbit_type" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.USER_ID = "rabbit_userId" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.X_DEATH = "x-death" -> string
const Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders.X_DELAY = "x-delay" -> string
const Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.DEFAULT_FRAME_MAX_HEADROOM = 20000 -> int
const Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.X_EXCEPTION_MESSAGE = "x-exception-message" -> string
const Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.X_EXCEPTION_STACKTRACE = "x-exception-stacktrace" -> string
const Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.X_ORIGINAL_EXCHANGE = "x-original-exchange" -> string
const Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.X_ORIGINAL_ROUTING_KEY = "x-original-routingKey" -> string
const Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.DEFAULT_SERVICE_NAME = "ContentTypeDelegatingMessageConverter" -> string
const Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.DEFAULT_CLASSID_FIELD_NAME = "__TypeId__" -> string
const Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.DEFAULT_CONTENT_CLASSID_FIELD_NAME = "__ContentTypeId__" -> string
const Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.DEFAULT_KEY_CLASSID_FIELD_NAME = "__KeyTypeId__" -> string
const Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.DEFAULT_SERVICE_NAME = "JsonMessageConverter" -> string
const Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter.DEFAULT_SERVICE_NAME = "SimpleMessageConverter" -> string
const Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.BATCH_FORMAT_LENGTH_HEADER4 = "lengthHeader4" -> string
const Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.DEFAULT_CONTENT_TYPE = "application/octet-stream" -> string
const Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.DEFAULT_DELIVERY_MODE = Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode.PERSISTENT -> Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
const Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.DEFAULT_PRIORITY = 0 -> int
const Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.INT_MASK = 32 -> int
const Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.SPRING_AUTO_DECOMPRESS = "springAutoDecompress" -> string
const Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.SPRING_BATCH_FORMAT = "springBatchFormat" -> string
const Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.X_DELAY = "x-delay" -> string
const Steeltoe.Messaging.RabbitMQ.Support.SendRetryContextAccessor.ADDRESS = "address" -> string
const Steeltoe.Messaging.RabbitMQ.Support.SendRetryContextAccessor.MESSAGE = "message" -> string
override Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Config.Binding.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Config.CustomExchange.Type.get -> string
override Steeltoe.Messaging.RabbitMQ.Config.DirectExchange.Type.get -> string
override Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.CreateContainerInstance() -> Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
override Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.InitializeContainer(Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer instance, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint) -> void
override Steeltoe.Messaging.RabbitMQ.Config.FanoutExchange.Type.get -> string
override Steeltoe.Messaging.RabbitMQ.Config.HeadersExchange.Type.get -> string
override Steeltoe.Messaging.RabbitMQ.Config.Queue.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Config.QueueInformation.Equals(object obj) -> bool
override Steeltoe.Messaging.RabbitMQ.Config.QueueInformation.GetHashCode() -> int
override Steeltoe.Messaging.RabbitMQ.Config.TopicExchange.Type.get -> string
override Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.AddConnectionListener(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener connectionListener) -> void
override Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CreateConnection() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
override Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.Destroy() -> void
override Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.Dispose() -> void
override Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.IsPublisherConfirms.get -> bool
override Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.IsPublisherReturns.get -> bool
override Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.IsPublisherReturns.set -> void
override Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.IsSimplePublisherConfirms.get -> bool
override Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.SetConnectionListeners(System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener> listeners) -> void
override Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Confirm.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Connection.SimpleRoutingConnectionFactory.DetermineCurrentLookupKey() -> object
override Steeltoe.Messaging.RabbitMQ.Connection.SimpleRoutingConnectionFactory.ServiceName.get -> string
override Steeltoe.Messaging.RabbitMQ.Connection.SimpleRoutingConnectionFactory.ServiceName.set -> void
override Steeltoe.Messaging.RabbitMQ.Core.Address.Equals(object obj) -> bool
override Steeltoe.Messaging.RabbitMQ.Core.Address.GetHashCode() -> int
override Steeltoe.Messaging.RabbitMQ.Core.Address.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate.Send(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
override Steeltoe.Messaging.RabbitMQ.Core.DeclarationExceptionEvent.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AbstractTemplateConsumer.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultTemplateConsumer.HandleBasicCancel(string consumerTag) -> void
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultTemplateConsumer.HandleBasicConsumeOk(string consumerTag) -> void
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultTemplateConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) -> void
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultTemplateConsumer.HandleModelShutdown(object model, RabbitMQ.Client.ShutdownEventArgs reason) -> void
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination destination) -> Steeltoe.Messaging.IMessage
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination destination, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination destination, Steeltoe.Messaging.IMessage message) -> void
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination destination, Steeltoe.Messaging.IMessage requestMessage) -> Steeltoe.Messaging.IMessage
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination destination, Steeltoe.Messaging.IMessage requestMessage, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveTemplateConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) -> void
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveTemplateConsumer.HandleModelShutdown(object model, RabbitMQ.Client.ShutdownEventArgs reason) -> void
override Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAsync(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination destination, Steeltoe.Messaging.IMessage message, System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
override Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitMessageReturnedException.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Listener.Adapters.BatchMessagingMessageListenerAdapter.OnMessageBatch(System.Collections.Generic.List<Steeltoe.Messaging.IMessage> messages, RabbitMQ.Client.IModel channel) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.OnMessage(Steeltoe.Messaging.IMessage message, RabbitMQ.Client.IModel channel) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.BuildMessage(RabbitMQ.Client.IModel channel, object result, System.Type genericType) -> Steeltoe.Messaging.IMessage<byte[]>
override Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.OnMessage(Steeltoe.Messaging.IMessage amqpMessage, RabbitMQ.Client.IModel channel) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.AddQueueNames(params string[] queueNames) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.AddQueues(params Steeltoe.Messaging.RabbitMQ.Config.IQueue[] queues) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.DoInitialize() -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.DoShutdown() -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.DoStart() -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.Exclusive.get -> bool
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.Exclusive.set -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.RemoveQueueNames(params string[] queueNames) -> bool
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.RemoveQueues(params Steeltoe.Messaging.RabbitMQ.Config.IQueue[] queues) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SetQueueNames(params string[] queueNames) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.HandleBasicCancel(string consumerTag) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.HandleBasicCancelOk(string consumerTag) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.HandleBasicConsumeOk(string consumerTag) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.HandleBasicDeliver(string consumerTag, ulong deliveryTag, bool redelivered, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.AddQueueNames(params string[] queueName) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ChannelHolder.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ConsumerRemoved(Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer consumer) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ConsumersPerQueue.get -> int
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ConsumersPerQueue.set -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.DoStart() -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.FindIdleConsumer() -> int
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.MessageListener.get -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.MessageListener.set -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.MonitorInterval.get -> long
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.MonitorInterval.set -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ProcessMonitorTask() -> void
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.RemoveQueueNames(params string[] queueName) -> bool
override Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.SetQueueNames(params string[] queueName) -> void
override Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.CreateMessageListener(Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer container) -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
override Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.GetEndpointDescription() -> System.Text.StringBuilder
override Steeltoe.Messaging.RabbitMQ.Listener.MultiMethodRabbitListenerEndpoint.ConfigureListenerAdapter(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter messageListener) -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
override Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory.ServiceName.get -> string
override Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory.ServiceName.set -> void
override Steeltoe.Messaging.RabbitMQ.Listener.SimpleRabbitListenerEndpoint.CreateMessageListener(Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer container) -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
override Steeltoe.Messaging.RabbitMQ.Listener.SimpleRabbitListenerEndpoint.GetEndpointDescription() -> System.Text.StringBuilder
override Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.CreateMessage(object objectToConvert, Steeltoe.Messaging.IMessageHeaders headers, object convertionHint) -> Steeltoe.Messaging.IMessage
override Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.FromMessage(Steeltoe.Messaging.IMessage message, System.Type targetType, object conversionHint) -> object
override Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.ServiceName.get -> string
override Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.ServiceName.set -> void
override Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter.CreateMessage(object payload, Steeltoe.Messaging.IMessageHeaders messageProperties, object conversionHint) -> Steeltoe.Messaging.IMessage
override Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter.FromMessage(Steeltoe.Messaging.IMessage from, System.Type targetType, object convertionsHint) -> object
override Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter.ServiceName.get -> string
override Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter.ServiceName.set -> void
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DeflaterPostProcessor.GetCompressorStream(System.IO.Stream stream) -> System.IO.Stream
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DeflaterPostProcessor.GetEncoding() -> string
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GUnzipPostProcessor.GetDeCompressorStream(System.IO.Stream zipped) -> System.IO.Stream
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GUnzipPostProcessor.GetEncoding() -> string
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GZipPostProcessor.GetCompressorStream(System.IO.Stream zipped) -> System.IO.Stream
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GZipPostProcessor.GetEncoding() -> string
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.InflaterPostProcessor.GetDeCompressorStream(System.IO.Stream stream) -> System.IO.Stream
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.InflaterPostProcessor.GetEncoding() -> string
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.UnzipPostProcessor.GetDeCompressorStream(System.IO.Stream zipped) -> System.IO.Stream
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.UnzipPostProcessor.GetEncoding() -> string
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.ZipPostProcessor.GetCompressorStream(System.IO.Stream zipped) -> System.IO.Stream
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.ZipPostProcessor.GetEncoding() -> string
override Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.ZipPostProcessor.PostProcessMessage(Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.IMessage
override Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.IsReadOnly(string headerName) -> bool
override Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ToMessageHeaders() -> Steeltoe.Messaging.IMessageHeaders
override Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.VerifyType(string headerName, object headerValue) -> void
override Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException.ToString() -> string
override Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.DoBegin(object transaction, Steeltoe.Common.Transaction.ITransactionDefinition definition) -> void
override Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.DoCleanupAfterCompletion(object transaction) -> void
override Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.DoCommit(Steeltoe.Common.Transaction.DefaultTransactionStatus status) -> void
override Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.DoGetTransaction() -> object
override Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.DoResume(object transaction, object suspendedResources) -> void
override Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.DoRollback(Steeltoe.Common.Transaction.DefaultTransactionStatus status) -> void
override Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.DoSetRollbackOnly(Steeltoe.Common.Transaction.DefaultTransactionStatus status) -> void
override Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.DoSuspend(object transaction) -> object
override Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.IsExistingTransaction(object transaction) -> bool
readonly Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>._logger -> Microsoft.Extensions.Logging.ILogger
readonly Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>._loggerFactory -> Microsoft.Extensions.Logging.ILoggerFactory
readonly Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory._logger -> Microsoft.Extensions.Logging.ILogger
readonly Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory._loggerFactory -> Microsoft.Extensions.Logging.ILoggerFactory
readonly Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory._rabbitConnectionFactory -> RabbitMQ.Client.IConnectionFactory
readonly Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate._logger -> Microsoft.Extensions.Logging.ILogger
readonly Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer._consumersMonitor -> object
readonly Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer._lifecycleMonitor -> object
readonly Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer._lock -> object
readonly Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer._logger -> Microsoft.Extensions.Logging.ILogger
readonly Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer._loggerFactory -> Microsoft.Extensions.Logging.ILoggerFactory
readonly Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint._logger -> Microsoft.Extensions.Logging.ILogger
readonly Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint._loggerFactory -> Microsoft.Extensions.Logging.ILoggerFactory
readonly Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter._logger -> Microsoft.Extensions.Logging.ILogger
readonly Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer._cancellationLock -> Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer>
readonly Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer._consumers -> System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer>
readonly Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer._consumersByQueue -> System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer>>
readonly Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer._consumersToRestart -> System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer>
readonly Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter._logger -> Microsoft.Extensions.Logging.ILogger
readonly Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor._logger -> Microsoft.Extensions.Logging.ILogger
static readonly Steeltoe.Messaging.RabbitMQ.Config.DirectExchange.DEFAULT -> Steeltoe.Messaging.RabbitMQ.Config.DirectExchange
static readonly Steeltoe.Messaging.RabbitMQ.Core.Base64UrlNamingStrategy.DEFAULT -> Steeltoe.Messaging.RabbitMQ.Core.Base64UrlNamingStrategy
static readonly Steeltoe.Messaging.RabbitMQ.Core.GuidNamingStrategy.DEFAULT -> Steeltoe.Messaging.RabbitMQ.Core.GuidNamingStrategy
static Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.Bind(Steeltoe.Messaging.RabbitMQ.Config.IExchange exchange) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer
static Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.Bind(Steeltoe.Messaging.RabbitMQ.Config.IQueue queue) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer
static Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.Create(string bindingName, Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType type) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
static Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.Create(string exchangeName, string exchangeType) -> Steeltoe.Messaging.RabbitMQ.Config.IExchange
static Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.DirectExchange(string name) -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
static Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.FanoutExchange(string name) -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
static Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.HeadersExchange(string name) -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
static Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.TopicExchange(string name) -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
static Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.Durable() -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
static Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.Durable(string name) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
static Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MasterLocator.ClientLocal.get -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MasterLocator
static Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MasterLocator.MinMasters.get -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MasterLocator
static Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MasterLocator.Random.get -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MasterLocator
static Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.NonDurable() -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
static Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.NonDurable(string name) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
static Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.OverFlow.DropHead.get -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.OverFlow
static Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.OverFlow.RejectPublish.get -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.OverFlow
static Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.BindResourceToTransaction(Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder resourceHolder, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, bool synched) -> Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
static Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.CreateConnection(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, bool publisherConnectionIfPossible) -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
static Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.GetTransactionalResourceHolder(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, bool synchedLocalTransactionAllowed) -> Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
static Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.GetTransactionalResourceHolder(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, bool synchedLocalTransactionAllowed, bool publisherConnectionIfPossible) -> Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
static Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.IsChannelTransactional(RabbitMQ.Client.IModel channel, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory) -> bool
static Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.RegisterDeliveryTag(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, RabbitMQ.Client.IModel channel, ulong tag) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.ReleaseResources(Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder resourceHolder) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.ConsumerChannelRegistry.GetConsumerChannel() -> RabbitMQ.Client.IModel
static Steeltoe.Messaging.RabbitMQ.Connection.ConsumerChannelRegistry.GetConsumerChannel(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory) -> RabbitMQ.Client.IModel
static Steeltoe.Messaging.RabbitMQ.Connection.ConsumerChannelRegistry.RegisterConsumerChannel(RabbitMQ.Client.IModel channel, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.ConsumerChannelRegistry.UnRegisterConsumerChannel(Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.Cancel(RabbitMQ.Client.IModel channel, string consumerTag, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.CloseChannel(RabbitMQ.Client.IModel channel, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.CloseConnection(Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.CloseMessageConsumer(RabbitMQ.Client.IModel channel, System.Collections.Generic.List<string> consumerTags, bool transactional, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.CommitIfNecessary(RabbitMQ.Client.IModel channel, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.DeclareTransactional(RabbitMQ.Client.IModel channel, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.GetMaxFrame(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory) -> int
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.IsMismatchedQueueArgs(RabbitMQ.Client.ShutdownEventArgs args) -> bool
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.IsMismatchedQueueArgs(System.Exception exception) -> bool
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.IsNormalChannelClose(RabbitMQ.Client.ShutdownEventArgs args) -> bool
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.IsNormalShutdown(RabbitMQ.Client.ShutdownEventArgs args) -> bool
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.IsNormalShutdown(Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException sig) -> bool
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.IsPassiveDeclarationChannelClose(System.Exception exception) -> bool
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.IsPhysicalCloseRequired() -> bool
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.RollbackIfNecessary(RabbitMQ.Client.IModel channel, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils.SetPhysicalCloseRequired(RabbitMQ.Client.IModel channel, bool b) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder.Bind(object key, object value, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder.Clear() -> void
static Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder.Get(object key, Microsoft.Extensions.Logging.ILogger logger = null) -> object
static Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder.GetResources() -> System.Collections.Generic.IDictionary<object, object>
static Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder.Has(object key, Microsoft.Extensions.Logging.ILogger logger = null) -> bool
static Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder.Pop(object key, Microsoft.Extensions.Logging.ILogger logger = null) -> object
static Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder.Push(object key, object value, Microsoft.Extensions.Logging.ILogger logger = null) -> void
static Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder.Unbind(object key, Microsoft.Extensions.Logging.ILogger logger = null) -> object
static Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder.UnbindIfPossible(object key, Microsoft.Extensions.Logging.ILogger logger = null) -> object
static Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsAutoAck(this Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode mode) -> bool
static Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsManual(this Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode mode) -> bool
static Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions.IsTransactionAllowed(this Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode mode) -> bool
static Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination.implicit operator Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination(string destination) -> Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
static Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination.implicit operator string(Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination destination) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.ApplicationContextExtensions.GetRabbitAdmin(this Steeltoe.Common.Contexts.IApplicationContext context, string name = null) -> Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin
static Steeltoe.Messaging.RabbitMQ.Extensions.ApplicationContextExtensions.GetRabbitBinding(this Steeltoe.Common.Contexts.IApplicationContext context, string name) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
static Steeltoe.Messaging.RabbitMQ.Extensions.ApplicationContextExtensions.GetRabbitBindings(this Steeltoe.Common.Contexts.IApplicationContext context) -> System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.IBinding>
static Steeltoe.Messaging.RabbitMQ.Extensions.ApplicationContextExtensions.GetRabbitExchange(this Steeltoe.Common.Contexts.IApplicationContext context, string name) -> Steeltoe.Messaging.RabbitMQ.Config.IExchange
static Steeltoe.Messaging.RabbitMQ.Extensions.ApplicationContextExtensions.GetRabbitExchanges(this Steeltoe.Common.Contexts.IApplicationContext context) -> System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.IExchange>
static Steeltoe.Messaging.RabbitMQ.Extensions.ApplicationContextExtensions.GetRabbitQueue(this Steeltoe.Common.Contexts.IApplicationContext context, string name) -> Steeltoe.Messaging.RabbitMQ.Config.IQueue
static Steeltoe.Messaging.RabbitMQ.Extensions.ApplicationContextExtensions.GetRabbitQueues(this Steeltoe.Common.Contexts.IApplicationContext context) -> System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.IQueue>
static Steeltoe.Messaging.RabbitMQ.Extensions.ApplicationContextExtensions.GetRabbitTemplate(this Steeltoe.Common.Contexts.IApplicationContext context, string name = null) -> Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppId(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string appId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetAppIdIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string appId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterId(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string clusterId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetClusterIdIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string clusterId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncoding(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string contentEncoding) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentEncodingIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string contentEncoding) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLength(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, long contentLength) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentLengthIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, long contentLength) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentType(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string contentType) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetContentTypeIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string contentType) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationId(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string correlationId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetCorrelationIdIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string correlationId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryMode(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode deliveryMode) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryModeIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode deliveryMode) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTag(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, ulong deliveryTag) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetDeliveryTagIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, ulong deliveryTag) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpiration(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string expiration) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetExpirationIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string expiration) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCount(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, uint messageCount) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageCountIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, uint messageCount) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageId(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string messageId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetMessageIdIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string messageId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriority(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, int priority) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetPriorityIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, int priority) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchange(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string receivedExchange) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedExchangeIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string receivedExchange) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKey(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string receivedRoutingKey) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReceivedRoutingKeyIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string receivedRoutingKey) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedelivered(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, bool redelivered) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetRedeliveredIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, bool redelivered) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyTo(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string replyTo) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddress(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, Steeltoe.Messaging.RabbitMQ.Core.Address replyTo) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToAddressIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, Steeltoe.Messaging.RabbitMQ.Core.Address replyTo) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetReplyToIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string replyTo) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestamp(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, long timestamp) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTimestampIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, long timestamp) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetType(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string type) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetTypeIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string type) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserId(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string userId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions.SetUserIdIfAbsent(this Steeltoe.Messaging.Support.AbstractMessageBuilder builder, string userId) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.AppId(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ClusterId(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ConsumerQueue(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ConsumerTag(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ContentEncoding(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ContentLength(this Steeltoe.Messaging.IMessageHeaders headers) -> long?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ContentType(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.CorrelationId(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.Delay(this Steeltoe.Messaging.IMessageHeaders headers) -> int?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.DeliveryMode(this Steeltoe.Messaging.IMessageHeaders headers) -> Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.DeliveryTag(this Steeltoe.Messaging.IMessageHeaders headers) -> ulong?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.Expiration(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.FinalRetryForMessageWithNoId(this Steeltoe.Messaging.IMessageHeaders headers) -> bool?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.InferredArgumentType(this Steeltoe.Messaging.IMessageHeaders headers) -> System.Type
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.IsContentLengthSet(this Steeltoe.Messaging.IMessageHeaders headers) -> bool
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.IsDeliveryTagSet(this Steeltoe.Messaging.IMessageHeaders headers) -> bool
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.IsFinalRetryForMessageWithNoId(this Steeltoe.Messaging.IMessageHeaders headers) -> bool
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.LastInBatch(this Steeltoe.Messaging.IMessageHeaders headers) -> bool?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.MessageCount(this Steeltoe.Messaging.IMessageHeaders headers) -> uint?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.MessageId(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.Priority(this Steeltoe.Messaging.IMessageHeaders headers) -> int?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.PublishSequenceNumber(this Steeltoe.Messaging.IMessageHeaders headers) -> ulong?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ReceivedDelay(this Steeltoe.Messaging.IMessageHeaders headers) -> int?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ReceivedDeliveryMode(this Steeltoe.Messaging.IMessageHeaders headers) -> Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ReceivedExchange(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ReceivedRoutingKey(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ReceivedUserId(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.Redelivered(this Steeltoe.Messaging.IMessageHeaders headers) -> bool?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ReplyTo(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.ReplyToAddress(this Steeltoe.Messaging.IMessageHeaders headers) -> Steeltoe.Messaging.RabbitMQ.Core.Address
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.Target(this Steeltoe.Messaging.IMessageHeaders headers) -> object
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.TargetMethod(this Steeltoe.Messaging.IMessageHeaders headers) -> System.Reflection.MethodInfo
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.Timestamp(this Steeltoe.Messaging.IMessageHeaders headers) -> long?
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.Type(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions.UserId(this Steeltoe.Messaging.IMessageHeaders headers) -> string
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitListenerExtensions.AddRabbitListeners(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration config, params System.Type[] listenerServices) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitListenerExtensions.AddRabbitListeners<T>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration config = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitAdmin(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Steeltoe.Messaging.RabbitMQ.Config.IBinding binding) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string bindingName, Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType bindingType, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBinding(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IBinding> factory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitBindings(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params Steeltoe.Messaging.RabbitMQ.Config.IBinding[] bindings) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory<F>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName = null, System.Action<System.IServiceProvider, F> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitConnectionFactory<F>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, F> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDefaultMessageConverter(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName = null, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitDirecListenerContainer(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer> factory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Steeltoe.Messaging.RabbitMQ.Config.IExchange exchange) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string exchangeName, string exchangeType, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchange(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IExchange> factory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitExchanges(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params Steeltoe.Messaging.RabbitMQ.Config.IExchange[] exchanges) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitHostingServices(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitJsonMessageConverter(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor<P>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName = null, System.Action<System.IServiceProvider, P> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerAttributeProcessor<P>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, P> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer<C>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName = null, System.Action<System.IServiceProvider, C> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainer<C>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, C> factory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory<F>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName = null, System.Action<System.IServiceProvider, F> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerContainerFactory<F>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, F> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar<R>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName = null, System.Action<System.IServiceProvider, R> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistrar<R>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, R> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry<R>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName = null, System.Action<System.IServiceProvider, R> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerEndpointRegistry<R>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, R> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerErrorHandler<H>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitListenerErrorHandler<H>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Func<System.IServiceProvider, H> factory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter<C>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName = null, System.Action<System.IServiceProvider, C> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageConverter<C>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, C> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory<F>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName = null, System.Action<System.IServiceProvider, F> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitMessageHandlerMethodFactory<F>(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, F> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Steeltoe.Messaging.RabbitMQ.Config.IQueue queue) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string queueName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.Queue> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueue(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Func<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Config.IQueue> factory) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitQueues(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, params Steeltoe.Messaging.RabbitMQ.Config.IQueue[] queues) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitServices(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, bool useJsonMessageConverter = false) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(this Microsoft.Extensions.DependencyInjection.IServiceCollection services) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, string serviceName, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate> configure = null) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.AddRabbitTemplate(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, System.Action<System.IServiceProvider, Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate> configure) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions.ConfigureRabbitOptions(this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration config) -> Microsoft.Extensions.DependencyInjection.IServiceCollection
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetApplicationContext(this System.IServiceProvider provider) -> Steeltoe.Common.Contexts.IApplicationContext
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitAdmin(this System.IServiceProvider provider, string name = null) -> Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBinding(this System.IServiceProvider provider, string name) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitBindings(this System.IServiceProvider provider) -> System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.IBinding>
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitConnectionFactory(this System.IServiceProvider provider, string factoryName = null) -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchange(this System.IServiceProvider provider, string name) -> Steeltoe.Messaging.RabbitMQ.Config.IExchange
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitExchanges(this System.IServiceProvider provider) -> System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.IExchange>
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueue(this System.IServiceProvider provider, string name) -> Steeltoe.Messaging.RabbitMQ.Config.IQueue
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitQueues(this System.IServiceProvider provider) -> System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.IQueue>
static Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions.GetRabbitTemplate(this System.IServiceProvider provider, string name = null) -> Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
static Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHost.CreateDefaultBuilder() -> Microsoft.Extensions.Hosting.IHostBuilder
static Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHost.CreateDefaultBuilder(string[] args) -> Microsoft.Extensions.Hosting.IHostBuilder
static Steeltoe.Messaging.RabbitMQ.Listener.Support.ContainerUtils.IsRejectManual(System.Exception exception) -> bool
static Steeltoe.Messaging.RabbitMQ.Listener.Support.ContainerUtils.ShouldRequeue(bool defaultRequeueRejected, System.Exception exception, Microsoft.Extensions.Logging.ILogger logger = null) -> bool
static Steeltoe.Messaging.RabbitMQ.Support.MessagePostProcessorUtils.Sort(System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor> processors) -> System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor>
static Steeltoe.Messaging.RabbitMQ.Support.RabbitExceptionTranslator.ConvertRabbitAccessException(System.Exception exception) -> System.Exception
static Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.GetAccessor(Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
static Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.GetAccessor(Steeltoe.Messaging.IMessageHeaders messageHeaders) -> Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
static Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.GetMutableAccessor(Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
static Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.GetMutableAccessor(Steeltoe.Messaging.IMessageHeaders headers) -> Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
static Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.CreateMessage(object payload, Steeltoe.Messaging.IMessageHeaders messageHeaders, System.Type payloadType = null) -> Steeltoe.Messaging.IMessage
static Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage(Steeltoe.Messaging.IMessage message, System.Type payloadType = null) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.FromMessage<P>(Steeltoe.Messaging.IMessage<P> message) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload(object payload, System.Type payloadType = null) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder.WithPayload<P>(P payload) -> Steeltoe.Messaging.Support.AbstractMessageBuilder
static Steeltoe.Messaging.RabbitMQ.Support.SendRetryContextAccessor.GetAddress(Steeltoe.Common.Retry.IRetryContext context) -> Steeltoe.Messaging.RabbitMQ.Core.Address
static Steeltoe.Messaging.RabbitMQ.Support.SendRetryContextAccessor.GetMessage(Steeltoe.Common.Retry.IRetryContext context) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareAnonymousQueueAttribute
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareAnonymousQueueAttribute.DeclareAnonymousQueueAttribute(string id) -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareAnonymousQueueAttribute.Id.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareAnonymousQueueAttribute.Id.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Admin.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Admin.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Admins.get -> string[]
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Admins.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.AutoDelete.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.AutoDelete.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Declare.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Declare.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.DeclareExchangeAttribute() -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Delayed.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Delayed.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Durable.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Durable.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.IgnoreDeclarationExceptions.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.IgnoreDeclarationExceptions.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Internal.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Internal.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Name.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Name.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Type.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareExchangeAttribute.Type.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueAttribute
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueAttribute.DeclareQueueAttribute() -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueAttribute.Name.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueAttribute.Name.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.DeclareQueueBase() -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.Admin.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.Admin.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.Admins.get -> string[]
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.Admins.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.Declare.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.Declare.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.DeclareQueueBindingAttribute() -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.ExchangeName.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.ExchangeName.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.IgnoreDeclarationExceptions.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.IgnoreDeclarationExceptions.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.Name.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.Name.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.QueueName.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.QueueName.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.RoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.RoutingKey.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.RoutingKeys.get -> string[]
Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBindingAttribute.RoutingKeys.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitHandlerAttribute
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitHandlerAttribute.IsDefault.get -> bool
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitHandlerAttribute.IsDefault.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitHandlerAttribute.RabbitHandlerAttribute(bool isDefault = false) -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.AckMode.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.AckMode.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Admin.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Admin.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.AutoStartup.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.AutoStartup.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Binding.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Binding.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Bindings.get -> string[]
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Bindings.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Concurrency.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Concurrency.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.ContainerFactory.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.ContainerFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.ErrorHandler.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.ErrorHandler.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Exclusive.get -> bool
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Exclusive.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Group.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Group.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Id.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Id.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Priority.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Priority.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Queue.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Queue.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Queues.get -> string[]
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.Queues.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.RabbitListenerAttribute(params string[] queues) -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.ReplyPostProcessor.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.ReplyPostProcessor.set -> void
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.ReturnExceptions.get -> string
Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute.ReturnExceptions.set -> void
Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.AddToBatch(string exchange, string routingKey, Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch?
Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders properties) -> bool
Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage message, System.Action<Steeltoe.Messaging.IMessage> fragmentConsumer) -> void
Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.NextRelease() -> System.DateTime?
Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy.ReleaseBatches() -> System.Collections.Generic.ICollection<Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch>
Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch
Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch.Exchange.get -> string
Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch.Message.get -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch.MessageBatch() -> void
Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch.MessageBatch(string exchange, string routingKey, Steeltoe.Messaging.IMessage message) -> void
Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch.RoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy
Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.AddToBatch(string exch, string routKey, Steeltoe.Messaging.IMessage input) -> Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch?
Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.CanDebatch(Steeltoe.Messaging.IMessageHeaders properties) -> bool
Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.DeBatch(Steeltoe.Messaging.IMessage input, System.Action<Steeltoe.Messaging.IMessage> fragmentConsumer) -> void
Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.NextRelease() -> System.DateTime?
Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.ReleaseBatches() -> System.Collections.Generic.ICollection<Steeltoe.Messaging.RabbitMQ.Batch.MessageBatch>
Steeltoe.Messaging.RabbitMQ.Batch.SimpleBatchingStrategy.SimpleBatchingStrategy(int batchSize, int bufferLimit, long timeout) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractBuilder
Steeltoe.Messaging.RabbitMQ.Config.AbstractBuilder.AbstractBuilder() -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractBuilder.Arguments.get -> System.Collections.Generic.Dictionary<string, object>
Steeltoe.Messaging.RabbitMQ.Config.AbstractBuilder.GetOrCreateArguments() -> System.Collections.Generic.Dictionary<string, object>
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.AbstractDeclarable(System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.AddArgument(string name, object value) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.Arguments.get -> System.Collections.Generic.Dictionary<string, object>
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.Arguments.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.DeclaringAdmins.get -> System.Collections.Generic.List<object>
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.DeclaringAdmins.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.IgnoreDeclarationExceptions.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.IgnoreDeclarationExceptions.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.RemoveArgument(string name) -> object
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.ShouldDeclare.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.ShouldDeclare.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable._declaringAdmins -> System.Collections.Generic.List<object>
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.AbstractExchange(string exchangeName) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.AbstractExchange(string exchangeName, bool durable, bool autoDelete) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.AbstractExchange(string exchangeName, bool durable, bool autoDelete, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.ExchangeName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.ExchangeName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.IsAutoDelete.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.IsAutoDelete.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.IsDelayed.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.IsDelayed.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.IsDurable.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.IsDurable.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.IsInternal.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.IsInternal.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions> optionsMonitor, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AbstractRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AcknowledgeMode.get -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AcknowledgeMode.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AfterReceivePostProcessors.get -> System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor>
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AfterReceivePostProcessors.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AutoStartup.get -> bool?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.AutoStartup.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BatchingStrategy.get -> Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BatchingStrategy.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BatchListener.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BatchListener.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BeforeSendReplyPostProcessors.get -> System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor>
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.BeforeSendReplyPostProcessors.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ConnectionFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ConsumerTagStrategy.get -> Steeltoe.Messaging.RabbitMQ.Core.IConsumerTagStrategy
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ConsumerTagStrategy.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ContainerCustomizer.get -> System.Action<C>
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ContainerCustomizer.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint) -> C
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.DeBatchingEnabled.get -> bool?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.DeBatchingEnabled.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.DefaultRequeueRejected.get -> bool?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.DefaultRequeueRejected.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ErrorHandler.get -> Steeltoe.Common.Util.IErrorHandler
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ErrorHandler.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.FailedDeclarationRetryInterval.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.FailedDeclarationRetryInterval.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.IdleEventInterval.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.IdleEventInterval.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.IsChannelTransacted.get -> bool?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.IsChannelTransacted.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MessageConverter.get -> Steeltoe.Messaging.Converter.ISmartMessageConverter
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MessageConverter.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MismatchedQueuesFatal.get -> bool?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MismatchedQueuesFatal.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MissingQueuesFatal.get -> bool?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.MissingQueuesFatal.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.Options.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.Phase.get -> int
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.Phase.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.PossibleAuthenticationFailureFatal.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.PossibleAuthenticationFailureFatal.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.PrefetchCount.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.PrefetchCount.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RecoveryBackOff.get -> Steeltoe.Common.Util.IBackOff
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RecoveryBackOff.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RecoveryInterval.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RecoveryInterval.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ReplyRecoveryCallback.get -> Steeltoe.Common.Retry.IRecoveryCallback
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ReplyRecoveryCallback.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RetryTemplate.get -> Steeltoe.Common.Retry.RetryTemplate
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.RetryTemplate.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.SetAfterReceivePostProcessors(params Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[] postProcessors) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.SetBeforeSendReplyPostProcessors(params Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[] postProcessors) -> void
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.TransactionManager.get -> Steeltoe.Common.Transaction.IPlatformTransactionManager
Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.TransactionManager.set -> void
Steeltoe.Messaging.RabbitMQ.Config.AnonymousQueue
Steeltoe.Messaging.RabbitMQ.Config.AnonymousQueue.AnonymousQueue() -> void
Steeltoe.Messaging.RabbitMQ.Config.AnonymousQueue.AnonymousQueue(Steeltoe.Messaging.RabbitMQ.Core.INamingStrategy namingStrategy) -> void
Steeltoe.Messaging.RabbitMQ.Config.AnonymousQueue.AnonymousQueue(Steeltoe.Messaging.RabbitMQ.Core.INamingStrategy namingStrategy, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.AnonymousQueue.AnonymousQueue(string serviceName) -> void
Steeltoe.Messaging.RabbitMQ.Config.AnonymousQueue.AnonymousQueue(System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.Binding
Steeltoe.Messaging.RabbitMQ.Config.Binding.Binding(string bindingName) -> void
Steeltoe.Messaging.RabbitMQ.Config.Binding.Binding(string bindingName, string destination, Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType destinationType, string exchange, string routingKey, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.Binding.BindingName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Binding.BindingName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Binding.Destination.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Binding.Destination.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType.EXCHANGE = 1 -> Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType.QUEUE = 0 -> Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
Steeltoe.Messaging.RabbitMQ.Config.Binding.Exchange.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Binding.Exchange.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Binding.IsDestinationQueue.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.Binding.RoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Binding.RoutingKey.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Binding.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Binding.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Binding.Type.get -> Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
Steeltoe.Messaging.RabbitMQ.Config.Binding.Type.set -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.AbstractRoutingKeyConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.AbstractRoutingKeyConfigurer.AbstractRoutingKeyConfigurer(Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer destination, string exchange) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.AbstractRoutingKeyConfigurer.Destination.get -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.AbstractRoutingKeyConfigurer.ExchangeName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.BindingBuilder() -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer.DestinationConfigurer(string destinationName, Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType type) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer.Name.get -> string
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer.To(Steeltoe.Messaging.RabbitMQ.Config.DirectExchange exchange) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DirectExchangeRoutingKeyConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer.To(Steeltoe.Messaging.RabbitMQ.Config.FanoutExchange exchange) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer.To(Steeltoe.Messaging.RabbitMQ.Config.HeadersExchange exchange) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer.To(Steeltoe.Messaging.RabbitMQ.Config.IExchange exchange) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericExchangeRoutingKeyConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer.To(Steeltoe.Messaging.RabbitMQ.Config.TopicExchange exchange) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.TopicExchangeRoutingKeyConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer.Type.get -> Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DirectExchangeRoutingKeyConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DirectExchangeRoutingKeyConfigurer.DirectExchangeRoutingKeyConfigurer(Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer destination, Steeltoe.Messaging.RabbitMQ.Config.DirectExchange exchange) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DirectExchangeRoutingKeyConfigurer.With(string routingKey) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DirectExchangeRoutingKeyConfigurer.With(System.Enum routingKeyEnum) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DirectExchangeRoutingKeyConfigurer.WithQueueName() -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericArgumentsConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericArgumentsConfigurer.And(System.Collections.Generic.Dictionary<string, object> map) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericArgumentsConfigurer.GenericArgumentsConfigurer(Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericExchangeRoutingKeyConfigurer configurer, string routingKey) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericArgumentsConfigurer.NoArgs() -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericExchangeRoutingKeyConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericExchangeRoutingKeyConfigurer.GenericExchangeRoutingKeyConfigurer(Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer destination, Steeltoe.Messaging.RabbitMQ.Config.IExchange exchange) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericExchangeRoutingKeyConfigurer.With(string routingKey) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericArgumentsConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericExchangeRoutingKeyConfigurer.With(System.Enum routingKeyEnum) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.GenericArgumentsConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.Destination.get -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.Exchange.get -> Steeltoe.Messaging.RabbitMQ.Config.HeadersExchange
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeKeysBindingCreator
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeKeysBindingCreator.Exist() -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeKeysBindingCreator.HeadersExchangeKeysBindingCreator(Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer configurer, string[] headerKeys, bool matchAll) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeMapBindingCreator
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeMapBindingCreator.HeadersExchangeMapBindingCreator(Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer configurer, System.Collections.Generic.Dictionary<string, object> headerMap, bool matchAll) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeMapBindingCreator.Match() -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeMapConfigurer(Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer destination, Steeltoe.Messaging.RabbitMQ.Config.HeadersExchange exchange) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeSingleValueBindingCreator
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeSingleValueBindingCreator.Exists() -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeSingleValueBindingCreator.HeadersExchangeSingleValueBindingCreator(Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer configurer, string key) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeSingleValueBindingCreator.Matches(object value) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.Where(string key) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeSingleValueBindingCreator
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.WhereAll(params string[] headerKeys) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeKeysBindingCreator
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.WhereAll(System.Collections.Generic.Dictionary<string, object> headerValues) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeMapBindingCreator
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.WhereAny(params string[] headerKeys) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeKeysBindingCreator
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.WhereAny(System.Collections.Generic.Dictionary<string, object> headerValues) -> Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.HeadersExchangeMapConfigurer.HeadersExchangeMapBindingCreator
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.TopicExchangeRoutingKeyConfigurer
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.TopicExchangeRoutingKeyConfigurer.TopicExchangeRoutingKeyConfigurer(Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.DestinationConfigurer destination, Steeltoe.Messaging.RabbitMQ.Config.TopicExchange exchange) -> void
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.TopicExchangeRoutingKeyConfigurer.With(string routingKey) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.BindingBuilder.TopicExchangeRoutingKeyConfigurer.With(System.Enum routingKeyEnum) -> Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.ContainerType
Steeltoe.Messaging.RabbitMQ.Config.ContainerType.DIRECT = 0 -> Steeltoe.Messaging.RabbitMQ.Config.ContainerType
Steeltoe.Messaging.RabbitMQ.Config.CustomExchange
Steeltoe.Messaging.RabbitMQ.Config.CustomExchange.CustomExchange(string name, string type) -> void
Steeltoe.Messaging.RabbitMQ.Config.CustomExchange.CustomExchange(string name, string type, bool durable, bool autoDelete) -> void
Steeltoe.Messaging.RabbitMQ.Config.CustomExchange.CustomExchange(string name, string type, bool durable, bool autoDelete, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.Declarables
Steeltoe.Messaging.RabbitMQ.Config.Declarables.DeclarableList.get -> System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Config.IDeclarable>
Steeltoe.Messaging.RabbitMQ.Config.Declarables.Declarables(string name, params Steeltoe.Messaging.RabbitMQ.Config.IDeclarable[] declarables) -> void
Steeltoe.Messaging.RabbitMQ.Config.Declarables.Declarables(string name, System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Config.IDeclarable> declarables) -> void
Steeltoe.Messaging.RabbitMQ.Config.Declarables.GetDeclarablesByType<T>() -> System.Collections.Generic.IEnumerable<T>
Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Declarables.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectExchange
Steeltoe.Messaging.RabbitMQ.Config.DirectExchange.DirectExchange(string name) -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectExchange.DirectExchange(string name, bool durable, bool autoDelete) -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectExchange.DirectExchange(string name, bool durable, bool autoDelete, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.AckTimeout.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.AckTimeout.set -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.ConsumersPerQueue.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.ConsumersPerQueue.set -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.DirectRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.DirectRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions> optionsMonitor, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.DirectRabbitListenerContainerFactory(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.MessagesPerAck.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.MessagesPerAck.set -> void
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.MonitorInterval.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.DirectRabbitListenerContainerFactory.MonitorInterval.set -> void
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBinding
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBinding.ExchangeBinding(string bindingName) -> void
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBinding.ExchangeBinding(string name, string exchangeDestination, string exchange, string routingKey, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.Admins(params object[] admins) -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.Alternate(string exchange) -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.AutoDelete() -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.Build() -> Steeltoe.Messaging.RabbitMQ.Config.AbstractExchange
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.Delayed() -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.Durable(bool isDurable) -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.ExchangeBuilder(string name, string type) -> void
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.IgnoreDeclarationExceptions() -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.Internal() -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.SuppressDeclaration() -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.WithArgument(string key, object value) -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder.WithArguments(System.Collections.Generic.Dictionary<string, object> arguments) -> Steeltoe.Messaging.RabbitMQ.Config.ExchangeBuilder
Steeltoe.Messaging.RabbitMQ.Config.ExchangeType
Steeltoe.Messaging.RabbitMQ.Config.FanoutExchange
Steeltoe.Messaging.RabbitMQ.Config.FanoutExchange.FanoutExchange(string name) -> void
Steeltoe.Messaging.RabbitMQ.Config.FanoutExchange.FanoutExchange(string name, bool durable, bool autoDelete) -> void
Steeltoe.Messaging.RabbitMQ.Config.FanoutExchange.FanoutExchange(string name, bool durable, bool autoDelete, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.HeadersExchange
Steeltoe.Messaging.RabbitMQ.Config.HeadersExchange.HeadersExchange(string name) -> void
Steeltoe.Messaging.RabbitMQ.Config.HeadersExchange.HeadersExchange(string name, bool durable, bool autoDelete) -> void
Steeltoe.Messaging.RabbitMQ.Config.HeadersExchange.HeadersExchange(string name, bool durable, bool autoDelete, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.IBinding
Steeltoe.Messaging.RabbitMQ.Config.IBinding.BindingName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.IBinding.BindingName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IBinding.Destination.get -> string
Steeltoe.Messaging.RabbitMQ.Config.IBinding.Destination.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IBinding.Exchange.get -> string
Steeltoe.Messaging.RabbitMQ.Config.IBinding.Exchange.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IBinding.IsDestinationQueue.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IBinding.RoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Config.IBinding.RoutingKey.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IBinding.Type.get -> Steeltoe.Messaging.RabbitMQ.Config.Binding.DestinationType
Steeltoe.Messaging.RabbitMQ.Config.IBinding.Type.set -> void
Steeltoe.Messaging.RabbitMQ.Config.ICustomExchange
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.AddArgument(string name, object value) -> void
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.Arguments.get -> System.Collections.Generic.Dictionary<string, object>
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.Arguments.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.DeclaringAdmins.get -> System.Collections.Generic.List<object>
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.DeclaringAdmins.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.IgnoreDeclarationExceptions.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.IgnoreDeclarationExceptions.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.RemoveArgument(string name) -> object
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.ShouldDeclare.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IDeclarable.ShouldDeclare.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IDeclarableCustomizer
Steeltoe.Messaging.RabbitMQ.Config.IDeclarableCustomizer.Apply(Steeltoe.Messaging.RabbitMQ.Config.IDeclarable declarable) -> Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
Steeltoe.Messaging.RabbitMQ.Config.IDirectExchange
Steeltoe.Messaging.RabbitMQ.Config.IExchange
Steeltoe.Messaging.RabbitMQ.Config.IExchange.ExchangeName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.IExchange.ExchangeName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IExchange.IsAutoDelete.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IExchange.IsAutoDelete.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IExchange.IsDelayed.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IExchange.IsDelayed.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IExchange.IsDurable.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IExchange.IsDurable.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IExchange.IsInternal.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IExchange.IsInternal.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IExchange.Type.get -> string
Steeltoe.Messaging.RabbitMQ.Config.IExchangeBinding
Steeltoe.Messaging.RabbitMQ.Config.IFanoutExchange
Steeltoe.Messaging.RabbitMQ.Config.IHeadersExchange
Steeltoe.Messaging.RabbitMQ.Config.IQueue
Steeltoe.Messaging.RabbitMQ.Config.IQueue.ActualName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.IQueue.ActualName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IQueue.Clone() -> object
Steeltoe.Messaging.RabbitMQ.Config.IQueue.IsAutoDelete.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IQueue.IsAutoDelete.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IQueue.IsDurable.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IQueue.IsDurable.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IQueue.IsExclusive.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.IQueue.IsExclusive.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IQueue.MasterLocator.get -> string
Steeltoe.Messaging.RabbitMQ.Config.IQueue.MasterLocator.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IQueue.QueueName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.IQueue.QueueName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.IQueueBinding
Steeltoe.Messaging.RabbitMQ.Config.IRabbitListenerAttributeProcessor
Steeltoe.Messaging.RabbitMQ.Config.IRabbitListenerAttributeProcessor.Initialize() -> void
Steeltoe.Messaging.RabbitMQ.Config.IRabbitListenerConfigurer
Steeltoe.Messaging.RabbitMQ.Config.IRabbitListenerConfigurer.ConfigureRabbitListeners(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar registrar) -> void
Steeltoe.Messaging.RabbitMQ.Config.ITopicExchange
Steeltoe.Messaging.RabbitMQ.Config.Queue
Steeltoe.Messaging.RabbitMQ.Config.Queue.ActualName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Queue.ActualName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.Clone() -> object
Steeltoe.Messaging.RabbitMQ.Config.Queue.IsAutoDelete.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.Queue.IsAutoDelete.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.IsDurable.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.Queue.IsDurable.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.IsExclusive.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.Queue.IsExclusive.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.MasterLocator.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Queue.MasterLocator.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.Queue(string queueName) -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.Queue(string queueName, bool durable) -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.Queue(string queueName, bool durable, bool exclusive, bool autoDelete) -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.Queue(string queueName, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.QueueName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Queue.QueueName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.Queue.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.Queue.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.QueueBinding
Steeltoe.Messaging.RabbitMQ.Config.QueueBinding.QueueBinding(string bindingName) -> void
Steeltoe.Messaging.RabbitMQ.Config.QueueBinding.QueueBinding(string name, string queueDestination, string exchange, string routingKey, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.AutoDelete() -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.Build() -> Steeltoe.Messaging.RabbitMQ.Config.IQueue
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.DeadLetterExchange(string dlx) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.DeadLetterRoutingKey(string dlrk) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.DeliveryLimit(int limit) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.Exclusive() -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.Expires(int expires) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.Lazy() -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MasterLocator
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.Masterlocator(Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MasterLocator locator) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MasterLocator.Value.get -> string
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MaxLength(int count) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MaxLengthBytes(int bytes) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.MaxPriority(int maxPriority) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.OverFlow
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.Overflow(Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.OverFlow overflow) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.OverFlow.Value.get -> string
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.Quorum() -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.SingleActiveConsumer() -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.TTL(int ttl) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.WithArgument(string key, object value) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder.WithArguments(System.Collections.Generic.Dictionary<string, object> arguments) -> Steeltoe.Messaging.RabbitMQ.Config.QueueBuilder
Steeltoe.Messaging.RabbitMQ.Config.QueueInformation
Steeltoe.Messaging.RabbitMQ.Config.QueueInformation.ConsumerCount.get -> uint
Steeltoe.Messaging.RabbitMQ.Config.QueueInformation.MessageCount.get -> uint
Steeltoe.Messaging.RabbitMQ.Config.QueueInformation.Name.get -> string
Steeltoe.Messaging.RabbitMQ.Config.QueueInformation.QueueInformation(string name, uint messageCount, uint consumerCount) -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.Charset.get -> System.Text.Encoding
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.Charset.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ContainerFactoryServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ContainerFactoryServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.EndpointRegistry.get -> Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ExpressionContext.get -> Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionContext
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ExpressionContext.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.Initialize() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.Order.get -> int
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ProcessListener(Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint endpoint, Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute rabbitListener, object bean, object target, string beanName) -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ProcessMultiMethodListeners(System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Attributes.RabbitListenerAttribute> classLevelListeners, System.Collections.Generic.List<System.Reflection.MethodInfo> multiMethods, object bean, string beanName) -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.RabbitListenerAttributeProcessor(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry endpointRegistry, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar registrar, Steeltoe.Messaging.Handler.Attributes.Support.IMessageHandlerMethodFactory messageHandlerMethodFactory, System.Collections.Generic.IEnumerable<Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerMetadata> rabbitListeners, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.Registrar.get -> Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.Resolver.get -> Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionResolver
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.Resolver.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ServiceResolver.get -> Steeltoe.Common.Expression.Internal.IServiceResolver
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerAttributeProcessor.ServiceResolver.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerDeclareAtrributeProcessor
Steeltoe.Messaging.RabbitMQ.Config.RabbitListenerMetadata
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Addresses.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Addresses.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Cache.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.CacheOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Cache.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.CacheOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.CacheOptions.CacheOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.CacheOptions.Channel.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ChannelOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.CacheOptions.Channel.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.CacheOptions.Connection.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ConnectionOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.CacheOptions.Connection.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ChannelOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ChannelOptions.ChannelOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ChannelOptions.CheckoutTimeout.get -> System.TimeSpan?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ChannelOptions.CheckoutTimeout.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ChannelOptions.Size.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ChannelOptions.Size.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ConnectionOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ConnectionOptions.ConnectionOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ConnectionOptions.Mode.get -> Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ConnectionOptions.Mode.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ConnectionOptions.Size.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ConnectionOptions.Size.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ConnectionTimeout.get -> System.TimeSpan?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ConnectionTimeout.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DetermineAddresses() -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DetermineHost() -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DeterminePassword() -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DeterminePort() -> int
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DetermineSslEnabled() -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DetermineUsername() -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DetermineVirtualHost() -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.AcknowledgeMode.get -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.AcknowledgeMode.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.AutoStartup.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.AutoStartup.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.ConsumersPerQueue.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.ConsumersPerQueue.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.DefaultRequeueRejected.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.DefaultRequeueRejected.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.DirectContainerOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.IdleEventInterval.get -> System.TimeSpan?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.IdleEventInterval.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.MissingQueuesFatal.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.MissingQueuesFatal.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.PossibleAuthenticationFailureFatal.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.PossibleAuthenticationFailureFatal.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.Prefetch.get -> int?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.Prefetch.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.Retry.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerRetryOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions.Retry.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Host.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Host.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Listener.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Listener.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerOptions.Direct.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.DirectContainerOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerOptions.Direct.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerOptions.ListenerOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerOptions.Type.get -> Steeltoe.Messaging.RabbitMQ.Config.ContainerType
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerRetryOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerRetryOptions.ListenerRetryOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerRetryOptions.Stateless.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.ListenerRetryOptions.Stateless.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Password.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Password.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Port.get -> int
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Port.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.PublisherConfirms.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.PublisherConfirms.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.PublisherReturns.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.PublisherReturns.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RabbitOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RequestedHeartbeat.get -> System.TimeSpan?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RequestedHeartbeat.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.Enabled.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.Enabled.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.InitialInterval.get -> System.TimeSpan
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.InitialInterval.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.MaxAttempts.get -> int
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.MaxAttempts.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.MaxInterval.get -> System.TimeSpan
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.MaxInterval.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.Multiplier.get -> double
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.Multiplier.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions.RetryOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Ssl.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Ssl.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.Algorithm.get -> System.Security.Authentication.SslProtocols
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.Algorithm.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.CertPassphrase.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.CertPassphrase.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.CertPath.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.CertPath.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.Enabled.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.Enabled.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.ServerHostName.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.ServerHostName.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.SslOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.ValidateServerCertificate.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.ValidateServerCertificate.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.VerifyHostname.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.SslOptions.VerifyHostname.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Template.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Template.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.DefaultReceiveQueue.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.DefaultReceiveQueue.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.Exchange.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.Exchange.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.Mandatory.get -> bool
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.Mandatory.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.ReceiveTimeout.get -> System.TimeSpan?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.ReceiveTimeout.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.ReplyTimeout.get -> System.TimeSpan?
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.ReplyTimeout.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.Retry.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.RetryOptions
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.Retry.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.RoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.RoutingKey.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.TemplateOptions.TemplateOptions() -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Username.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.Username.set -> void
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.VirtualHost.get -> string
Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions.VirtualHost.set -> void
Steeltoe.Messaging.RabbitMQ.Config.TopicExchange
Steeltoe.Messaging.RabbitMQ.Config.TopicExchange.TopicExchange(string name) -> void
Steeltoe.Messaging.RabbitMQ.Config.TopicExchange.TopicExchange(string name, bool durable, bool autoDelete) -> void
Steeltoe.Messaging.RabbitMQ.Config.TopicExchange.TopicExchange(string name, bool durable, bool autoDelete, System.Collections.Generic.Dictionary<string, object> arguments) -> void
Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.AbstractConnectionFactory(RabbitMQ.Client.IConnectionFactory rabbitConnectionFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.AbstractConnectionFactory(RabbitMQ.Client.IConnectionFactory rabbitConnectionFactory, Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory publisherConnectionFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.AbstractRoutingConnectionFactory() -> void
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.DefaultTargetConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.DefaultTargetConnectionFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.Dispose() -> void
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.Host.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.IsPublisherConfirms.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.IsPublisherReturns.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.IsSimplePublisherConfirms.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.LenientFallback.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.LenientFallback.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.Port.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.PublisherConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.Username.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.VirtualHost.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CacheMode.get -> Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CacheMode.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(int port, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions> optionsMonitor, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(RabbitMQ.Client.IConnectionFactory rabbitConnectionFactory, bool isPublisherFactory, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode cachingMode = Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode.CHANNEL, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(RabbitMQ.Client.IConnectionFactory rabbitConnectionFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(string hostname, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(string hostNameArg, int port, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(string hostNameArg, int port, RabbitMQ.Client.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(System.Uri uri, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingConnectionFactory(System.Uri uri, Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode cachingMode = Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode.CHANNEL, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode.CHANNEL = 0 -> Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode.CONNECTION = 1 -> Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CachingMode
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ChannelCacheSize.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ChannelCacheSize.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ChannelCheckoutTimeout.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ChannelCheckoutTimeout.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ChannelShutdownCompleted(object sender, RabbitMQ.Client.ShutdownEventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CloseAndClear(System.Collections.Generic.LinkedList<Steeltoe.Messaging.RabbitMQ.Connection.IChannelProxy> theChannels) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CloseChannels(System.Collections.Generic.ICollection<Steeltoe.Messaging.RabbitMQ.Connection.IChannelProxy> theChannels) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CloseExceptionLogger.get -> Steeltoe.Messaging.RabbitMQ.Core.IConditionalExceptionLogger
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.CloseExceptionLogger.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConfirmType
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConfirmType.CORRELATED = 1 -> Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConfirmType
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConfirmType.NONE = 2 -> Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConfirmType
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConfirmType.SIMPLE = 0 -> Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConfirmType
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConnectionCacheSize.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConnectionCacheSize.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConnectionLimit.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConnectionLimit.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.GetCacheProperties() -> System.Collections.Generic.IDictionary<string, object>
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.Options.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.PublisherCachingConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.PublisherCachingConnectionFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.PublisherCallbackChannelFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannelFactory
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.PublisherCallbackChannelFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.PublisherConfirmType.get -> Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ConfirmType
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.PublisherConfirmType.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.Reset(System.Collections.Generic.LinkedList<Steeltoe.Messaging.RabbitMQ.Connection.IChannelProxy> channels, System.Collections.Generic.LinkedList<Steeltoe.Messaging.RabbitMQ.Connection.IChannelProxy> txChannels, System.Collections.Generic.Dictionary<RabbitMQ.Client.IModel, Steeltoe.Messaging.RabbitMQ.Connection.IChannelProxy> channelsAwaitingAcks) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CachingConnectionFactory.ResetConnection() -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeChannelListener
Steeltoe.Messaging.RabbitMQ.Connection.CompositeChannelListener.AddListener(Steeltoe.Messaging.RabbitMQ.Connection.IChannelListener channelListener) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeChannelListener.ClearListeners() -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeChannelListener.CompositeChannelListener(Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeChannelListener.OnCreate(RabbitMQ.Client.IModel channel, bool transactional) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeChannelListener.OnShutDown(RabbitMQ.Client.ShutdownEventArgs event) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeChannelListener.RemoveListener(Steeltoe.Messaging.RabbitMQ.Connection.IChannelListener channelListener) -> bool
Steeltoe.Messaging.RabbitMQ.Connection.CompositeChannelListener.SetListeners(System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Connection.IChannelListener> channelListeners) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeConnectionListener
Steeltoe.Messaging.RabbitMQ.Connection.CompositeConnectionListener.AddListener(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener connectionListener) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeConnectionListener.ClearListeners() -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeConnectionListener.CompositeConnectionListener(Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeConnectionListener.OnClose(Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeConnectionListener.OnCreate(Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeConnectionListener.OnShutDown(RabbitMQ.Client.ShutdownEventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CompositeConnectionListener.RemoveListener(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener connectionListener) -> bool
Steeltoe.Messaging.RabbitMQ.Connection.CompositeConnectionListener.SetListeners(System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener> connectionListeners) -> void
Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils
Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.IResourceFactory
Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.IResourceFactory.CreateChannel(Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection) -> RabbitMQ.Client.IModel
Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.IResourceFactory.CreateConnection2() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.IResourceFactory.GetChannel(Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder holder) -> RabbitMQ.Client.IModel
Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.IResourceFactory.GetConnection(Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder holder) -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
Steeltoe.Messaging.RabbitMQ.Connection.ConnectionFactoryUtils.IResourceFactory.IsSynchedLocalTransactionAllowed.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.ConsumerChannelRegistry
Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Confirm
Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Confirm.Ack.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Confirm.Confirm(bool ack, string reason) -> void
Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Confirm.Reason.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.CorrelationData(string id) -> void
Steeltoe.Messaging.RabbitMQ.Connection.DefaultPublisherCallbackFactory
Steeltoe.Messaging.RabbitMQ.Connection.DefaultPublisherCallbackFactory.CreateChannel(RabbitMQ.Client.IModel channel) -> Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel
Steeltoe.Messaging.RabbitMQ.Connection.DefaultPublisherCallbackFactory.DefaultPublisherCallbackFactory(Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IBlockedListener
Steeltoe.Messaging.RabbitMQ.Connection.IBlockedListener.HandleBlocked(object sender, RabbitMQ.Client.Events.ConnectionBlockedEventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IBlockedListener.HandleUnblocked(object sender, System.EventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IChannelListener
Steeltoe.Messaging.RabbitMQ.Connection.IChannelListener.OnCreate(RabbitMQ.Client.IModel channel, bool transactional) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IChannelListener.OnShutDown(RabbitMQ.Client.ShutdownEventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IChannelProxy
Steeltoe.Messaging.RabbitMQ.Connection.IChannelProxy.IsConfirmSelected.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IChannelProxy.IsTransactional.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IChannelProxy.TargetChannel.get -> RabbitMQ.Client.IModel
Steeltoe.Messaging.RabbitMQ.Connection.IConnection
Steeltoe.Messaging.RabbitMQ.Connection.IConnection.AddBlockedListener(Steeltoe.Messaging.RabbitMQ.Connection.IBlockedListener listener) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IConnection.Close() -> void
Steeltoe.Messaging.RabbitMQ.Connection.IConnection.Connection.get -> RabbitMQ.Client.IConnection
Steeltoe.Messaging.RabbitMQ.Connection.IConnection.CreateChannel(bool transactional = false) -> RabbitMQ.Client.IModel
Steeltoe.Messaging.RabbitMQ.Connection.IConnection.IsOpen.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IConnection.LocalPort.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.IConnection.RemoveBlockedListener(Steeltoe.Messaging.RabbitMQ.Connection.IBlockedListener listener) -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.AddConnectionListener(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener connectionListener) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.ClearConnectionListeners() -> void
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.CreateConnection() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.Destroy() -> void
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.Host.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.IsPublisherConfirms.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.IsPublisherReturns.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.IsSimplePublisherConfirms.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.Port.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.PublisherConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.RemoveConnectionListener(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener connectionListener) -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.Username.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory.VirtualHost.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener.OnClose(Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener.OnCreate(Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener.OnShutDown(RabbitMQ.Client.ShutdownEventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionProxy
Steeltoe.Messaging.RabbitMQ.Connection.IConnectionProxy.TargetConnection.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.AddListener(Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener listener) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.AddPendingConfirm(Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener listener, ulong sequence, Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm pendingConfirm) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.Channel.get -> RabbitMQ.Client.IModel
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.Expire(Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener listener, long cutoffTime) -> System.Collections.Generic.IList<Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm>
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.GetPendingConfirmsCount() -> int
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.GetPendingConfirmsCount(Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener listener) -> int
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm pendingConfirm, bool ack) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.HandleReturn(int replyCode, string replyText, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsConfirmListener.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.IsReturnListener.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.Revoke(RabbitMQ.Client.IModel channel) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener.UUID.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.SetAfterAckCallback(System.Action<RabbitMQ.Client.IModel> callback) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannelFactory
Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannelFactory.CreateChannel(RabbitMQ.Client.IModel channel) -> Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel
Steeltoe.Messaging.RabbitMQ.Connection.IRecoveryListener
Steeltoe.Messaging.RabbitMQ.Connection.IRecoveryListener.HandleConnectionRecoveryError(object sender, RabbitMQ.Client.Events.ConnectionRecoveryErrorEventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IRecoveryListener.HandleRecoverySucceeded(object sender, System.EventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Connection.IRoutingConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.IRoutingConnectionFactory.GetTargetConnectionFactory(object key) -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.IShutDownChannelListener
Steeltoe.Messaging.RabbitMQ.Connection.IShutdownListener
Steeltoe.Messaging.RabbitMQ.Connection.IShutdownListener.ChannelShutdownCompleted(object sender, RabbitMQ.Client.ShutdownEventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm
Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm.Cause.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm.Cause.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm.CorrelationInfo.get -> Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm.PendingConfirm(Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, long timestamp) -> void
Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm.Timestamp.get -> long
Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel
Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.Dispose() -> void
Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.PublisherCallbackChannel(RabbitMQ.Client.IModel channel, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.AddChannel(RabbitMQ.Client.IModel channel) -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.AddChannel(RabbitMQ.Client.IModel channel, Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection) -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.AddConnection(Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection) -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.AddDeliveryTag(RabbitMQ.Client.IModel channel, ulong deliveryTag) -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.CloseAll() -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.CommitAll() -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.ContainsChannel(RabbitMQ.Client.IModel channel) -> bool
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.GetChannel() -> RabbitMQ.Client.IModel
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.GetConnection() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.RabbitResourceHolder(Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.RabbitResourceHolder(RabbitMQ.Client.IModel channel, bool releaseAfterCompletion, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.ReleaseAfterCompletion.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.RequeueOnRollback.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.RequeueOnRollback.set -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder.RollbackAll() -> void
Steeltoe.Messaging.RabbitMQ.Connection.RabbitUtils
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.AddBlockedListener(Steeltoe.Messaging.RabbitMQ.Connection.IBlockedListener listener) -> void
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.Address.get -> string
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.Close() -> void
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.Connection.get -> RabbitMQ.Client.IConnection
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.CreateChannel(bool transactional = false) -> RabbitMQ.Client.IModel
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.Dispose() -> void
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.IsOpen.get -> bool
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.LocalPort.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.Port.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.RemotePort.get -> int
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.RemoveBlockedListener(Steeltoe.Messaging.RabbitMQ.Connection.IBlockedListener listener) -> bool
Steeltoe.Messaging.RabbitMQ.Connection.SimpleConnection.SimpleConnection(RabbitMQ.Client.IConnection connection, int closeTimeout, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Connection.SimpleResourceHolder
Steeltoe.Messaging.RabbitMQ.Connection.SimpleRoutingConnectionFactory
Steeltoe.Messaging.RabbitMQ.Connection.SimpleRoutingConnectionFactory.SimpleRoutingConnectionFactory() -> void
Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode.AUTO = 2 -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode.MANUAL = 1 -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode.NONE = 0 -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeModeExtensions
Steeltoe.Messaging.RabbitMQ.Core.Address
Steeltoe.Messaging.RabbitMQ.Core.Address.Address(string address) -> void
Steeltoe.Messaging.RabbitMQ.Core.Address.Address(string exchangeName, string routingKey) -> void
Steeltoe.Messaging.RabbitMQ.Core.Address.ExchangeName.get -> string
Steeltoe.Messaging.RabbitMQ.Core.Address.RoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Core.Base64UrlNamingStrategy
Steeltoe.Messaging.RabbitMQ.Core.Base64UrlNamingStrategy.Base64UrlNamingStrategy() -> void
Steeltoe.Messaging.RabbitMQ.Core.Base64UrlNamingStrategy.Base64UrlNamingStrategy(string prefix) -> void
Steeltoe.Messaging.RabbitMQ.Core.Base64UrlNamingStrategy.GenerateName() -> string
Steeltoe.Messaging.RabbitMQ.Core.Base64UrlNamingStrategy.Prefix.get -> string
Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate
Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate.BatchingRabbitTemplate(Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions> optionsMonitor, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.Converter.ISmartMessageConverter messageConverter, Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy batchingStrategy, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate.BatchingRabbitTemplate(Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions> optionsMonitor, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy batchingStrategy, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate.BatchingRabbitTemplate(Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy batchingStrategy) -> void
Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate.BatchingRabbitTemplate(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions options, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.Converter.ISmartMessageConverter messageConverter, Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy batchingStrategy, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate.BatchingRabbitTemplate(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions options, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy batchingStrategy, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate.BatchingRabbitTemplate(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy batchingStrategy) -> void
Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate.Flush() -> void
Steeltoe.Messaging.RabbitMQ.Core.BatchingRabbitTemplate.FlushAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Core.DeclarationExceptionEvent
Steeltoe.Messaging.RabbitMQ.Core.DeclarationExceptionEvent.Declarable.get -> Steeltoe.Messaging.RabbitMQ.Config.IDeclarable
Steeltoe.Messaging.RabbitMQ.Core.DeclarationExceptionEvent.DeclarationExceptionEvent(object source, Steeltoe.Messaging.RabbitMQ.Config.IDeclarable declarable, System.Exception exception) -> void
Steeltoe.Messaging.RabbitMQ.Core.DeclarationExceptionEvent.Exception.get -> System.Exception
Steeltoe.Messaging.RabbitMQ.Core.Envelope
Steeltoe.Messaging.RabbitMQ.Core.Envelope.DeliveryTag.get -> ulong
Steeltoe.Messaging.RabbitMQ.Core.Envelope.Envelope(ulong deliveryTag, bool redeliver, string exchange, string routingKey) -> void
Steeltoe.Messaging.RabbitMQ.Core.Envelope.Exchange.get -> string
Steeltoe.Messaging.RabbitMQ.Core.Envelope.Redeliver.get -> bool
Steeltoe.Messaging.RabbitMQ.Core.Envelope.RoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Core.GuidNamingStrategy
Steeltoe.Messaging.RabbitMQ.Core.GuidNamingStrategy.GenerateName() -> string
Steeltoe.Messaging.RabbitMQ.Core.GuidNamingStrategy.GuidNamingStrategy() -> void
Steeltoe.Messaging.RabbitMQ.Core.IChannelCallback<T>
Steeltoe.Messaging.RabbitMQ.Core.IChannelCallback<T>.DoInRabbit(RabbitMQ.Client.IModel channel) -> T
Steeltoe.Messaging.RabbitMQ.Core.IConditionalExceptionLogger
Steeltoe.Messaging.RabbitMQ.Core.IConditionalExceptionLogger.Log(Microsoft.Extensions.Logging.ILogger logger, string message, object cause) -> void
Steeltoe.Messaging.RabbitMQ.Core.IConsumerTagStrategy
Steeltoe.Messaging.RabbitMQ.Core.IConsumerTagStrategy.CreateConsumerTag(string queue) -> string
Steeltoe.Messaging.RabbitMQ.Core.ICorrelationDataPostProcessor
Steeltoe.Messaging.RabbitMQ.Core.ICorrelationDataPostProcessor.PostProcess(Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData
Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor.PostProcessMessage(Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlation) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Core.INamingStrategy
Steeltoe.Messaging.RabbitMQ.Core.INamingStrategy.GenerateName() -> string
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.DeclareBinding(Steeltoe.Messaging.RabbitMQ.Config.IBinding binding) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.DeclareExchange(Steeltoe.Messaging.RabbitMQ.Config.IExchange exchange) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.DeclareQueue() -> Steeltoe.Messaging.RabbitMQ.Config.IQueue
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.DeclareQueue(Steeltoe.Messaging.RabbitMQ.Config.IQueue queue) -> string
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.DeleteExchange(string exchangeName) -> bool
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.DeleteQueue(string queueName) -> bool
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.DeleteQueue(string queueName, bool unused, bool empty) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.GetQueueInfo(string queueName) -> Steeltoe.Messaging.RabbitMQ.Config.QueueInformation
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.GetQueueProperties(string queueName) -> System.Collections.Generic.Dictionary<string, object>
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.Initialize() -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.PurgeQueue(string queueName) -> uint
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.PurgeQueue(string queueName, bool noWait) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin.RemoveBinding(Steeltoe.Messaging.RabbitMQ.Config.IBinding binding) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(string exchange, string routingKey, object message) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertAndSend(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(string exchange, string routingKey, object message) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ConvertSendAndReceive<T>(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Execute<T>(System.Func<RabbitMQ.Client.IModel, T> channelCallback) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T> operationsCallback) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T> operationsCallback, System.Action<object, RabbitMQ.Client.Events.BasicAckEventArgs> acks, System.Action<object, RabbitMQ.Client.Events.BasicNackEventArgs> nacks) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.IOperationsCallback<T>
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.IOperationsCallback<T>.DoInRabbit(Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate operations) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(int timeoutMillis) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Receive(string queueName, int timeoutMillis) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert<T>(int timeoutMillis) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndConvert<T>(string queueName, int timeoutMillis) -> T
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(string queueName, System.Func<R, S> callback) -> bool
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(string queueName, System.Func<R, S> callback, string replyExchange, string replyRoutingKey) -> bool
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(string queueName, System.Func<R, S> callback, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address> replyToAddressCallback) -> bool
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S> callback) -> bool
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S> callback, string replyExchange, string replyRoutingKey) -> bool
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S> callback, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address> replyToAddressCallback) -> bool
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(string exchange, string routingKey, Steeltoe.Messaging.IMessage message) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.Send(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAndReceive(string exchange, string routingKey, Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.SendAsync(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirms(int timeout) -> bool
Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate.WaitForConfirmsOrDie(int timeout) -> void
Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode.NON_PERSISTENT = 1 -> Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode.PERSISTENT = 2 -> Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.AutoStartup.get -> bool
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.AutoStartup.set -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.ConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.ConnectionFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.DeclareBinding(Steeltoe.Messaging.RabbitMQ.Config.IBinding binding) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.DeclareExchange(Steeltoe.Messaging.RabbitMQ.Config.IExchange exchange) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.DeclareQueue() -> Steeltoe.Messaging.RabbitMQ.Config.IQueue
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.DeclareQueue(Steeltoe.Messaging.RabbitMQ.Config.IQueue queue) -> string
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.DeleteExchange(string exchangeName) -> bool
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.DeleteQueue(string queueName) -> bool
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.DeleteQueue(string queueName, bool unused, bool empty) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.ExplicitDeclarationsOnly.get -> bool
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.ExplicitDeclarationsOnly.set -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.GetQueueInfo(string queueName) -> Steeltoe.Messaging.RabbitMQ.Config.QueueInformation
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.GetQueueProperties(string queueName) -> System.Collections.Generic.Dictionary<string, object>
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.IgnoreDeclarationExceptions.get -> bool
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.IgnoreDeclarationExceptions.set -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.Initialize() -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.IsAutoStartup.get -> bool
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.IsAutoStartup.set -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.IsRunning.get -> bool
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.LastDeclarationExceptionEvent.get -> Steeltoe.Messaging.RabbitMQ.Core.DeclarationExceptionEvent
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.OnClose(Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.OnCreate(Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.OnShutDown(RabbitMQ.Client.ShutdownEventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.PurgeQueue(string queueName) -> uint
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.PurgeQueue(string queueName, bool noWait) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.RabbitAdmin(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.RabbitAdmin(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.RabbitAdmin(Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate template, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.RabbitTemplate.get -> Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.RemoveBinding(Steeltoe.Messaging.RabbitMQ.Config.IBinding binding) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.RetryDisabled.get -> bool
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.RetryDisabled.set -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.RetryTemplate.get -> Steeltoe.Common.Retry.RetryTemplate
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.RetryTemplate.set -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdmin.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdminEvent
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdminEvent.RabbitAdminEvent(object source) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitAdminEvent.Source.get -> object
Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination
Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination.ExchangeName.get -> string
Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination.QueueName.get -> string
Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination.RabbitDestination(string exchangeName, string routingKey) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination.RabbitDestination(string queueName) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitDestination.RoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AbstractTemplateConsumer
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AbstractTemplateConsumer.AbstractTemplateConsumer(RabbitMQ.Client.IModel channel) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmListener
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmListener.ConfirmListener(System.Action<object, RabbitMQ.Client.Events.BasicAckEventArgs> acks, System.Action<object, RabbitMQ.Client.Events.BasicNackEventArgs> nacks, RabbitMQ.Client.IModel channel) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveRaw(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultTemplateConsumer
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultTemplateConsumer.DefaultTemplateConsumer(RabbitMQ.Client.IModel channel, System.Threading.CountdownEvent latch, System.Threading.Tasks.TaskCompletionSource<Steeltoe.Messaging.RabbitMQ.Support.Delivery> completionSource, string queueName, System.Threading.CancellationToken cancelationToken) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveTemplateConsumer
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveTemplateConsumer.DoSendAndReceiveTemplateConsumer(Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate template, RabbitMQ.Client.IModel channel, Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply pendingReply) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IConfirmCallback
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IConfirmCallback.Confirm(Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, bool ack, string cause) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IReturnCallback
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IReturnCallback.ReturnedMessage(Steeltoe.Messaging.IMessage<byte[]> message, int replyCode, string replyText, string exchange, string routingKey) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Options.get -> Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.PendingReply() -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions> optionsMonitor, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Microsoft.Extensions.Options.IOptionsMonitor<Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions> optionsMonitor, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.Converter.ISmartMessageConverter messageConverter, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions options, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Steeltoe.Messaging.RabbitMQ.Config.RabbitOptions options, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.Converter.ISmartMessageConverter messageConverter, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RabbitTemplate(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.ImmediateAcknowledgeException
Steeltoe.Messaging.RabbitMQ.Exceptions.ImmediateAcknowledgeException.ImmediateAcknowledgeException(string message) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.ImmediateAcknowledgeException.ImmediateAcknowledgeException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.ImmediateAcknowledgeException.ImmediateAcknowledgeException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.ImmediateRequeueException
Steeltoe.Messaging.RabbitMQ.Exceptions.ImmediateRequeueException.ImmediateRequeueException(string message) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.ImmediateRequeueException.ImmediateRequeueException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.ImmediateRequeueException.ImmediateRequeueException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitApplicationContextClosedException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitApplicationContextClosedException.RabbitApplicationContextClosedException(string message) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitAuthenticationException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitAuthenticationException.RabbitAuthenticationException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitClientException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitClientException.RabbitClientException(RabbitMQ.Client.Exceptions.RabbitMQClientException cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitClientException.RabbitClientException(string message, RabbitMQ.Client.Exceptions.RabbitMQClientException cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitConnectException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitConnectException.RabbitConnectException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitConnectException.RabbitConnectException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitException.RabbitException(string message) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitException.RabbitException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitException.RabbitException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitIllegalStateException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitIllegalStateException.RabbitIllegalStateException(string message) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitIllegalStateException.RabbitIllegalStateException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitIOException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitIOException.RabbitIOException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitIOException.RabbitIOException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitMessageReturnedException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitMessageReturnedException.Exchange.get -> string
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitMessageReturnedException.RabbitMessageReturnedException(string message, Steeltoe.Messaging.IMessage returnedMessage, int replyCode, string replyText, string exchange, string routingKey) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitMessageReturnedException.ReplyCode.get -> int
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitMessageReturnedException.ReplyText.get -> string
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitMessageReturnedException.ReturnedMessage.get -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitMessageReturnedException.RoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitRejectAndDontRequeueException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitRejectAndDontRequeueException.IsRejectManual.get -> bool
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitRejectAndDontRequeueException.RabbitRejectAndDontRequeueException(string message) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitRejectAndDontRequeueException.RabbitRejectAndDontRequeueException(string message, bool rejectManual, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitRejectAndDontRequeueException.RabbitRejectAndDontRequeueException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitRejectAndDontRequeueException.RabbitRejectAndDontRequeueException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitRemoteException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitRemoteException.RabbitRemoteException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitResourceNotAvailableException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitResourceNotAvailableException.RabbitResourceNotAvailableException(string message) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitResourceNotAvailableException.RabbitResourceNotAvailableException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitResourceNotAvailableException.RabbitResourceNotAvailableException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitTimeoutException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitTimeoutException.RabbitTimeoutException(string message) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitTimeoutException.RabbitTimeoutException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitTimeoutException.RabbitTimeoutException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitUncategorizedException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitUncategorizedException.RabbitUncategorizedException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitUncategorizedException.RabbitUncategorizedException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitUnsupportedEncodingException
Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitUnsupportedEncodingException.RabbitUnsupportedEncodingException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Extensions.ApplicationContextExtensions
Steeltoe.Messaging.RabbitMQ.Extensions.MessageBuilderExtensions
Steeltoe.Messaging.RabbitMQ.Extensions.MessageHeaderExtensions
Steeltoe.Messaging.RabbitMQ.Extensions.RabbitListenerExtensions
Steeltoe.Messaging.RabbitMQ.Extensions.RabbitServicesExtensions
Steeltoe.Messaging.RabbitMQ.Extensions.ServiceProviderExtensions
Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService
Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.RabbitHostService(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Microsoft.Extensions.Logging.ILogger<Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService> logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StartAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Host.RabbitHostService.StopAsync(System.Threading.CancellationToken cancellationToken) -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHost
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHost.Dispose() -> void
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHost.RabbitMQHost(Microsoft.Extensions.Hosting.IHost host) -> void
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHost.Services.get -> System.IServiceProvider
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHost.StartAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHost.StopAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder.Build() -> Microsoft.Extensions.Hosting.IHost
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder.ConfigureAppConfiguration(System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.Configuration.IConfigurationBuilder> configureDelegate) -> Microsoft.Extensions.Hosting.IHostBuilder
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder.ConfigureContainer<TContainerBuilder>(System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, TContainerBuilder> configureDelegate) -> Microsoft.Extensions.Hosting.IHostBuilder
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder.ConfigureHostConfiguration(System.Action<Microsoft.Extensions.Configuration.IConfigurationBuilder> configureDelegate) -> Microsoft.Extensions.Hosting.IHostBuilder
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder.ConfigureServices(System.Action<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceCollection> configureDelegate) -> Microsoft.Extensions.Hosting.IHostBuilder
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder.Properties.get -> System.Collections.Generic.IDictionary<object, object>
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder.RabbitMQHostBuilder(Microsoft.Extensions.Hosting.IHostBuilder hostbuilder) -> void
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder.UseServiceProviderFactory<TContainerBuilder>(Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TContainerBuilder> factory) -> Microsoft.Extensions.Hosting.IHostBuilder
Steeltoe.Messaging.RabbitMQ.Host.RabbitMQHostBuilder.UseServiceProviderFactory<TContainerBuilder>(System.Func<Microsoft.Extensions.Hosting.HostBuilderContext, Microsoft.Extensions.DependencyInjection.IServiceProviderFactory<TContainerBuilder>> factory) -> Microsoft.Extensions.Hosting.IHostBuilder
Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AbstractMessageListenerContainer(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, string name = null, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RecoveryBackOff.get -> Steeltoe.Common.Util.IBackOff
Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RecoveryBackOff.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer._recoveryInterval -> int
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.AbstractRabbitListenerEndpoint(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.AckMode.get -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode?
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.AckMode.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Admin.get -> Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Admin.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.AutoStartup.get -> bool?
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.AutoStartup.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.BatchingStrategy.get -> Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.BatchingStrategy.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.BatchListener.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.BatchListener.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Concurrency.get -> int?
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Concurrency.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Exclusive.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Exclusive.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.ExpressionContext.get -> Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionContext
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.ExpressionContext.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Group.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Group.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Id.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Id.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.MessageConverter.get -> Steeltoe.Messaging.Converter.ISmartMessageConverter
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.MessageConverter.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Priority.get -> int?
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Priority.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.QueueNames.get -> System.Collections.Generic.List<string>
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Queues.get -> System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Config.IQueue>
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.ReplyPostProcessor.get -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.IReplyPostProcessor
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.ReplyPostProcessor.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Resolver.get -> Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionResolver
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.Resolver.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.ServiceResolver.get -> Steeltoe.Common.Expression.Internal.IServiceResolver
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.ServiceResolver.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.SetQueueNames(params string[] queueNames) -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.SetQueues(params Steeltoe.Messaging.RabbitMQ.Config.IQueue[] queues) -> void
Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.SetupListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer listenerContainer) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.AbstractMessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ReplyExpressionRoot
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ReplyExpressionRoot.ReplyExpressionRoot(Steeltoe.Messaging.IMessage request, object source, object result) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ReplyExpressionRoot.Request.get -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ReplyExpressionRoot.Result.get -> object
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ReplyExpressionRoot.Source.get -> object
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.SendResponse(RabbitMQ.Client.IModel channel, Steeltoe.Messaging.RabbitMQ.Core.Address replyTo, Steeltoe.Messaging.IMessage<byte[]> messageIn) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.SetServiceResolver(Steeltoe.Common.Expression.Internal.IServiceResolver serviceResolver) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.BatchMessagingMessageListenerAdapter
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.BatchMessagingMessageListenerAdapter.BatchMessagingMessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, object bean, System.Reflection.MethodInfo method, bool returnExceptions, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerErrorHandler errorHandler, Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy batchingStrategy, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.BatchMessagingMessageListenerAdapter.CreateList(System.Type type) -> System.Collections.IList
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.BatchMessagingMessageListenerAdapter.CreateMessageList(System.Type type) -> System.Collections.IList
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.BatchMessagingMessageListenerAdapter.ToMessagingMessage(Steeltoe.Messaging.IMessage amqpMessage) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Bean.get -> object
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DefaultHandler.get -> Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DelegatingInvocableHandler(System.Collections.Generic.List<Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod> handlers, object bean, Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionResolver resolver, Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionContext context) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.DelegatingInvocableHandler(System.Collections.Generic.List<Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod> handlers, Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod defaultHandler, object bean, Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionResolver resolver, Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionContext context) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetHandlerForPayload(System.Type payloadClass) -> Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetInvocationResultFor(object result, object inboundPayload) -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodFor(object payload) -> System.Reflection.MethodInfo
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.GetMethodNameFor(object payload) -> string
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Handlers.get -> System.Collections.Generic.List<Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod>
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.HasDefaultHandler.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Invoke(Steeltoe.Messaging.IMessage message, params object[] providedArgs) -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.MatchHandlerMethod(System.Type payloadClass, Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod handler) -> bool
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.Resolver.get -> Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionResolver
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.ServiceExpressionContext.get -> Steeltoe.Common.Expression.Internal.Contexts.IServiceExpressionContext
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.DelegatingHandler.get -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetInvocationResultFor(object result, object inboundPayload) -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodAsString(object payload) -> string
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetMethodFor(object payload) -> System.Reflection.MethodInfo
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.GetReturnTypeFor(object payload) -> System.Type
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.HandlerAdapter(Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod invokerHandlerMethod) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.HandlerAdapter(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler delegatingHandler) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Instance.get -> object
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.Invoke(Steeltoe.Messaging.IMessage message, params object[] providedArgs) -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter.InvokerHandlerMethod.get -> Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult.Instance.get -> object
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult.InvocationResult(object result, Steeltoe.Common.Expression.Internal.IExpression sendTo, System.Type returnType, object instance, System.Reflection.MethodInfo method) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult.Method.get -> System.Reflection.MethodInfo
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult.ReturnType.get -> System.Type
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult.ReturnValue.get -> object
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult.SendTo.get -> Steeltoe.Common.Expression.Internal.IExpression
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.IReplyingMessageListener<T, R>
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.IReplyingMessageListener<T, R>.HandleMessage(T t) -> R
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.IReplyPostProcessor
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.IReplyPostProcessor.Apply(Steeltoe.Messaging.IMessage arg1, Steeltoe.Messaging.IMessage arg2) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.AddQueueOrTagToMethodName(string queueOrTag, string methodName) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.DefaultListenerMethod.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.DefaultListenerMethod.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.Instance.get -> object
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.Instance.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.MessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.MessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, object delgate, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.MessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, object delgate, Steeltoe.Messaging.Converter.ISmartMessageConverter messageConverter, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.MessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, object delgate, string defaultListenerMethod, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.RemoveQueueOrTagToMethodName(string queueOrTag) -> string
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.SetQueueOrTagToMethodName(System.Collections.Generic.Dictionary<string, string> queueOrTagToMethodName) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.ErrorHandler.get -> Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerErrorHandler
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.HandlerAdapter.get -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.HandlerAdapter.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.InferredArgumentType.get -> System.Type
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.InferredArgumentType.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.InvokeHandlerAndProcessResult(Steeltoe.Messaging.IMessage amqpMessage, RabbitMQ.Client.IModel channel, Steeltoe.Messaging.IMessage message) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.IsBatch.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.IsMessageByteArrayList.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.IsMessageByteArrayList.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.IsMessageList.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.IsMessageList.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.MessagingMessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.MessagingMessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, object instance, System.Reflection.MethodInfo method, bool returnExceptions, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerErrorHandler errorHandler, bool batch, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.MessagingMessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, object instance, System.Reflection.MethodInfo method, bool returnExceptions, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerErrorHandler errorHandler, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.MessagingMessageListenerAdapter(Steeltoe.Common.Contexts.IApplicationContext context, object instance, System.Reflection.MethodInfo method, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.PreprocesMessage(Steeltoe.Messaging.IMessage message) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.ReturnExceptions.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.ReplyFailureException
Steeltoe.Messaging.RabbitMQ.Listener.Adapters.ReplyFailureException.ReplyFailureException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.AbortStarted.get -> long
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.AcknowledgeMode.get -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.ActiveObjectCounter.get -> Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer>
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.BackOffExecution.get -> Steeltoe.Common.Util.IBackOffExecution
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.BackOffExecution.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.BasicCancel() -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.BasicCancel(bool expected) -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.BlockingQueueConsumer(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter messagePropertiesConverter, Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer> activeObjectCounter, Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode acknowledgeMode, bool transactional, ushort prefetchCount, bool defaultRequeueRejected, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, params string[] queues) -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.BlockingQueueConsumer(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter messagePropertiesConverter, Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer> activeObjectCounter, Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode acknowledgeMode, bool transactional, ushort prefetchCount, bool defaultRequeueRejected, System.Collections.Generic.Dictionary<string, object> consumerArgs, bool exclusive, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, params string[] queues) -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.BlockingQueueConsumer(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter messagePropertiesConverter, Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer> activeObjectCounter, Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode acknowledgeMode, bool transactional, ushort prefetchCount, bool defaultRequeueRejected, System.Collections.Generic.Dictionary<string, object> consumerArgs, bool noLocal, bool exclusive, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, params string[] queues) -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.BlockingQueueConsumer(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter messagePropertiesConverter, Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer> activeObjectCounter, Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode acknowledgeMode, bool transactional, ushort prefetchCount, bool defaultRequeueRejected, System.Collections.Generic.Dictionary<string, object> consumerArgs, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, params string[] queues) -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.BlockingQueueConsumer(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter messagePropertiesConverter, Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer> activeObjectCounter, Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode acknowledgeMode, bool transactional, ushort prefetchCount, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory, params string[] queues) -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Cancel.get -> Steeltoe.Common.Util.AtomicBoolean
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Cancelled.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Channel.get -> RabbitMQ.Client.IModel
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.ClearDeliveryTags() -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.CommitIfNecessary(bool localTx) -> bool
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.ConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.ConsumerArgs.get -> System.Collections.Generic.Dictionary<string, object>
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.DeclarationRetries.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.DeclarationRetries.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Declaring.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Declaring.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.DefaultRequeueRejected.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.DeliveryTags.get -> System.Collections.Generic.HashSet<ulong>
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Exclusive.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.FailedDeclarationRetryInterval.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.FailedDeclarationRetryInterval.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.GetConsumerTags() -> System.Collections.Generic.List<string>
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.HasDelivery.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.LastRetryDeclaration.get -> long
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.LastRetryDeclaration.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.LocallyTransacted.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.LocallyTransacted.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Logger.get -> Microsoft.Extensions.Logging.ILogger<Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer>
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.LoggerFactory.get -> Microsoft.Extensions.Logging.ILoggerFactory
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.MessageHeadersConverter.get -> Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.MessageHeadersConverter.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.MissingQueues.get -> System.Collections.Generic.HashSet<string>
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.NextMessage() -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.NextMessage(int timeout) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.NoLocal.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.NormalCancel.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.NormalCancel.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.PrefetchCount.get -> ushort
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Queue.get -> System.Collections.Concurrent.BlockingCollection<Steeltoe.Messaging.RabbitMQ.Support.Delivery>
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.QueueCount.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Queues.get -> System.Collections.Generic.List<string>
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.ResourceHolder.get -> Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.ResourceHolder.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.RetryDeclarationInterval.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.RetryDeclarationInterval.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.RollbackOnExceptionIfNecessary(System.Exception ex) -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Shutdown.get -> RabbitMQ.Client.ShutdownEventArgs
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.ShutdownTimeout.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.ShutdownTimeout.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Start() -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Stop() -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.TagStrategy.get -> Steeltoe.Messaging.RabbitMQ.Core.IConsumerTagStrategy
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.TagStrategy.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.BlockingQueueConsumer.Transactional.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler
Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.ConditionalRejectingErrorHandler(Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.ConditionalRejectingErrorHandler(Steeltoe.Messaging.RabbitMQ.Listener.IFatalExceptionStrategy exceptionStrategy, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.DefaultExceptionStrategy
Steeltoe.Messaging.RabbitMQ.Listener.DefaultExceptionStrategy.DefaultExceptionStrategy(Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.DefaultExceptionStrategy.IsFatal(System.Exception exception) -> bool
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.DirectMessageListenerContainer(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, string name = null, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.DirectMessageListenerContainer(Steeltoe.Common.Contexts.IApplicationContext applicationContext, string name = null, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.DirectMessageListenerContainer(string name = null, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.AckFailed.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.AckRequired.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.AckTimeout.get -> long
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.Canceled.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.ConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.Epoch.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.IncrementAndGetEpoch() -> int
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.IsRabbitTxManager.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.LastAck.get -> long
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.LatestDeferredDeliveryTag.get -> ulong
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.MessagesPerAck.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.PendingAcks.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.Queue.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.SimpleConsumer(Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer container, Steeltoe.Messaging.RabbitMQ.Connection.IConnection connection, RabbitMQ.Client.IModel channel, string queue, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.TargetChanged.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.TransactionAttribute.get -> Steeltoe.Common.Transaction.ITransactionAttribute
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.TransactionManager.get -> Steeltoe.Common.Transaction.IPlatformTransactionManager
Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer.TransactionTemplate.get -> Steeltoe.Common.Transaction.TransactionTemplate
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ChannelHolder
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ChannelHolder.Channel.get -> RabbitMQ.Client.IModel
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ChannelHolder.ChannelHolder(RabbitMQ.Client.IModel channel, int consumerEpoch) -> void
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ChannelHolder.ConsumerEpoch.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.DirectReplyToMessageListenerContainer(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, string name = null, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.DirectReplyToMessageListenerContainer(Steeltoe.Common.Contexts.IApplicationContext applicationContext, string name = null, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.DirectReplyToMessageListenerContainer(string name = null, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.GetChannelHolder() -> Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ChannelHolder
Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ReleaseConsumerFor(Steeltoe.Messaging.RabbitMQ.Listener.DirectReplyToMessageListenerContainer.ChannelHolder channelHolder, bool cancelConsumer, string message) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.FatalListenerExecutionException
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.FatalListenerExecutionException.FatalListenerExecutionException(string msg) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.FatalListenerExecutionException.FatalListenerExecutionException(string msg, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.FatalListenerStartupException
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.FatalListenerStartupException.FatalListenerStartupException(string msg, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.ListenerExecutionFailedException
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.ListenerExecutionFailedException.FailedMessage.get -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.ListenerExecutionFailedException.FailedMessages.get -> System.Collections.Generic.List<Steeltoe.Messaging.IMessage>
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.ListenerExecutionFailedException.ListenerExecutionFailedException(string message, System.Exception cause, params Steeltoe.Messaging.IMessage[] failedMessages) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.QueuesNotAvailableException
Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.QueuesNotAvailableException.QueuesNotAvailableException(string message, System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IChannelAwareBatchMessageListener
Steeltoe.Messaging.RabbitMQ.Listener.IChannelAwareBatchMessageListener.OnMessage(Steeltoe.Messaging.IMessage message, RabbitMQ.Client.IModel channel) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IChannelAwareBatchMessageListener.OnMessageBatch(System.Collections.Generic.List<Steeltoe.Messaging.IMessage> messages, RabbitMQ.Client.IModel channel) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IChannelAwareMessageListener
Steeltoe.Messaging.RabbitMQ.Listener.IChannelAwareMessageListener.OnMessage(Steeltoe.Messaging.IMessage message, RabbitMQ.Client.IModel channel) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IChannelAwareMessageListener.OnMessageBatch(System.Collections.Generic.List<Steeltoe.Messaging.IMessage> messages, RabbitMQ.Client.IModel channel) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IFatalExceptionStrategy
Steeltoe.Messaging.RabbitMQ.Listener.IFatalExceptionStrategy.IsFatal(System.Exception exception) -> bool
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.ContainerAckMode.get -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.ContainerAckMode.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessage(Steeltoe.Messaging.IMessage message) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener.OnMessageBatch(System.Collections.Generic.List<Steeltoe.Messaging.IMessage> messages) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer.Initialize() -> void
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer.LazyLoad() -> void
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer.SetupMessageListener(Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener messageListener) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainerCollection
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainerCollection.Containers.get -> System.Collections.Generic.IList<Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer>
Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainerCollection.GroupName.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.IMessagingMessageListenerAdapter
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer() -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint) -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory<C>
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory<C>.CreateListenerContainer() -> C
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory<C>.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint) -> C
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.AckMode.get -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode?
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.AckMode.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.AutoStartup.get -> bool?
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.AutoStartup.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.BatchingStrategy.get -> Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.BatchingStrategy.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.BatchListener.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.BatchListener.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.Concurrency.get -> int?
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.Concurrency.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.Group.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.Group.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.Id.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.Id.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.MessageConverter.get -> Steeltoe.Messaging.Converter.ISmartMessageConverter
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.MessageConverter.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.ReplyPostProcessor.get -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.IReplyPostProcessor
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.ReplyPostProcessor.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint.SetupListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer messageListenerContainer) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.ContainerFactory.get -> Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.ContainerFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.ContainerFactoryServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.ContainerFactoryServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.EndpointRegistry.get -> Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.EndpointRegistry.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.Initialize() -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.MessageHandlerMethodFactory.get -> Steeltoe.Messaging.Handler.Attributes.Support.IMessageHandlerMethodFactory
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.MessageHandlerMethodFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.RegisterEndpoint(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.RegisterEndpoint(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory factory) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.StartImmediately.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistrar.StartImmediately.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry.GetListenerContainer(string id) -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry.GetListenerContainerIds() -> System.Collections.Generic.ISet<string>
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry.GetListenerContainers() -> System.Collections.Generic.ICollection<Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer>
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry.RegisterListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory factory) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry.RegisterListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory factory, bool startImmediately) -> void
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry.UnregisterListenerContainer(string id) -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerErrorHandler
Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerErrorHandler.HandleError(Steeltoe.Messaging.IMessage origMessage, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.ListenerExecutionFailedException exception) -> object
Steeltoe.Messaging.RabbitMQ.Listener.MessageListenerContainerCollection
Steeltoe.Messaging.RabbitMQ.Listener.MessageListenerContainerCollection.Containers.get -> System.Collections.Generic.IList<Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer>
Steeltoe.Messaging.RabbitMQ.Listener.MessageListenerContainerCollection.GroupName.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.MessageListenerContainerCollection.MessageListenerContainerCollection(string groupName) -> void
Steeltoe.Messaging.RabbitMQ.Listener.MessageListenerContainerCollection.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.MessageListenerContainerCollection.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.MessageRejectedWhileStoppingException
Steeltoe.Messaging.RabbitMQ.Listener.MessageRejectedWhileStoppingException.MessageRejectedWhileStoppingException() -> void
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.ErrorHandler.get -> Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerErrorHandler
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.ErrorHandler.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.Instance.get -> object
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.Instance.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.MessageHandlerMethodFactory.get -> Steeltoe.Messaging.Handler.Attributes.Support.IMessageHandlerMethodFactory
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.MessageHandlerMethodFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.Method.get -> System.Reflection.MethodInfo
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.Method.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.MethodRabbitListenerEndpoint(Steeltoe.Common.Contexts.IApplicationContext applicationContext, System.Reflection.MethodInfo method, object instance, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.ReturnExceptions.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.ReturnExceptions.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.MultiMethodRabbitListenerEndpoint
Steeltoe.Messaging.RabbitMQ.Listener.MultiMethodRabbitListenerEndpoint.DefaultMethod.get -> System.Reflection.MethodInfo
Steeltoe.Messaging.RabbitMQ.Listener.MultiMethodRabbitListenerEndpoint.Methods.get -> System.Collections.Generic.List<System.Reflection.MethodInfo>
Steeltoe.Messaging.RabbitMQ.Listener.MultiMethodRabbitListenerEndpoint.MultiMethodRabbitListenerEndpoint(Steeltoe.Common.Contexts.IApplicationContext applicationContext, System.Collections.Generic.List<System.Reflection.MethodInfo> methods, object instance, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.MultiMethodRabbitListenerEndpoint.MultiMethodRabbitListenerEndpoint(Steeltoe.Common.Contexts.IApplicationContext applicationContext, System.Collections.Generic.List<System.Reflection.MethodInfo> methods, System.Reflection.MethodInfo defaultMethod, object instance, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.ContainerFactory.get -> Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.ContainerFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.ContainerFactoryServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.ContainerFactoryServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.EndpointRegistry.get -> Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpointRegistry
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.EndpointRegistry.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.Initialize() -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.MessageHandlerMethodFactory.get -> Steeltoe.Messaging.Handler.Attributes.Support.IMessageHandlerMethodFactory
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.MessageHandlerMethodFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.RabbitListenerEndpointRegistrar(Steeltoe.Messaging.Handler.Attributes.Support.IMessageHandlerMethodFactory messageHandlerMethodFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.RegisterAllEndpoints() -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.RegisterEndpoint(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint) -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.RegisterEndpoint(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory factory) -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.StartImmediately.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistrar.StartImmediately.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.ApplicationContext.get -> Steeltoe.Common.Contexts.IApplicationContext
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.ApplicationContext.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.CreateListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory factory) -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.Dispose() -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.GetListenerContainer(string id) -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.GetListenerContainerIds() -> System.Collections.Generic.ISet<string>
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.GetListenerContainers() -> System.Collections.Generic.ICollection<Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer>
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.IsAutoStartup.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.IsRunning.get -> bool
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.Phase.get -> int
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.Phase.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.RabbitListenerEndpointRegistry(Steeltoe.Common.Contexts.IApplicationContext applicationContext, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.RegisterListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory factory) -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.RegisterListenerContainer(Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerContainerFactory factory, bool startImmediately) -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.Start() -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.Stop() -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.Stop(System.Action callback) -> System.Threading.Tasks.Task
Steeltoe.Messaging.RabbitMQ.Listener.RabbitListenerEndpointRegistry.UnregisterListenerContainer(string id) -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListenerContainer
Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory
Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory.Charset.get -> System.Text.Encoding
Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory.Charset.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.RabbitMessageHandlerMethodFactory.RabbitMessageHandlerMethodFactory() -> void
Steeltoe.Messaging.RabbitMQ.Listener.SimpleRabbitListenerEndpoint
Steeltoe.Messaging.RabbitMQ.Listener.SimpleRabbitListenerEndpoint.MessageListener.get -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
Steeltoe.Messaging.RabbitMQ.Listener.SimpleRabbitListenerEndpoint.MessageListener.set -> void
Steeltoe.Messaging.RabbitMQ.Listener.SimpleRabbitListenerEndpoint.SimpleRabbitListenerEndpoint(Steeltoe.Common.Contexts.IApplicationContext context, Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener listener = null, Microsoft.Extensions.Logging.ILoggerFactory loggerFactory = null) -> void
Steeltoe.Messaging.RabbitMQ.Listener.Support.ContainerUtils
Steeltoe.Messaging.RabbitMQ.RabbitMessageHeaders
Steeltoe.Messaging.RabbitMQ.Retry.IMessageRecoverer
Steeltoe.Messaging.RabbitMQ.Retry.IMessageRecoverer.Recover(Steeltoe.Messaging.IMessage message, System.Exception exception) -> void
Steeltoe.Messaging.RabbitMQ.Retry.RejectAndDontRequeueRecoverer
Steeltoe.Messaging.RabbitMQ.Retry.RejectAndDontRequeueRecoverer.Recover(Steeltoe.Common.Retry.IRetryContext context) -> object
Steeltoe.Messaging.RabbitMQ.Retry.RejectAndDontRequeueRecoverer.Recover(Steeltoe.Messaging.IMessage message, System.Exception exception) -> void
Steeltoe.Messaging.RabbitMQ.Retry.RejectAndDontRequeueRecoverer.RejectAndDontRequeueRecoverer() -> void
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.DeliveryMode.get -> Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.DeliveryMode.set -> void
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.ErrorExchangeName.get -> string
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.ErrorRoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.ErrorRoutingKeyPrefix.get -> string
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.ErrorRoutingKeyPrefix.set -> void
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.ErrorTemplate.get -> Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.FrameMaxHeadroom.get -> int
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.FrameMaxHeadroom.set -> void
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.MaxStackTraceLength.get -> int
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.MaxStackTraceLength.set -> void
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.Recover(Steeltoe.Messaging.IMessage message, System.Exception exception) -> void
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.RepublishMessageRecoverer(Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate errorTemplate, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.RepublishMessageRecoverer(Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate errorTemplate, string errorExchange, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.RepublishMessageRecoverer(Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate errorTemplate, string errorExchange, string errorRoutingKey, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Support.ConsumeOkNotReceivedException
Steeltoe.Messaging.RabbitMQ.Support.ConsumeOkNotReceivedException.ConsumeOkNotReceivedException(string message) -> void
Steeltoe.Messaging.RabbitMQ.Support.ConsumerCancelledException
Steeltoe.Messaging.RabbitMQ.Support.ConsumerCancelledException.ConsumerCancelledException() -> void
Steeltoe.Messaging.RabbitMQ.Support.ConsumerCancelledException.ConsumerCancelledException(System.Exception cause) -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter
Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.AbstractMessageConverter(Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.CreateMessageIds.get -> bool
Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.CreateMessageIds.set -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.FromMessage(Steeltoe.Messaging.IMessage message, System.Type targetClass) -> object
Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage message) -> T
Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage message, object conversionHint) -> T
Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.ToMessage(object payload, Steeltoe.Messaging.IMessageHeaders headers, object conversionHint) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.ToMessage(object payload, Steeltoe.Messaging.IMessageHeaders messageProperties) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Support.Converter.BytesToStringConverter
Steeltoe.Messaging.RabbitMQ.Support.Converter.BytesToStringConverter.BytesToStringConverter(System.Text.Encoding charset) -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.BytesToStringConverter.Convert(object source, System.Type sourceType, System.Type targetType) -> object
Steeltoe.Messaging.RabbitMQ.Support.Converter.BytesToStringConverter.ConvertibleTypes.get -> System.Collections.Generic.ISet<(System.Type Source, System.Type Target)>
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.AddDelegate(string contentType, Steeltoe.Messaging.Converter.ISmartMessageConverter messageConverter) -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter() -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter(Steeltoe.Messaging.Converter.ISmartMessageConverter defaultConverter) -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ContentTypeDelegatingMessageConverter(System.Collections.Generic.Dictionary<string, Steeltoe.Messaging.Converter.ISmartMessageConverter> delegates, Steeltoe.Messaging.Converter.ISmartMessageConverter defaultConverter) -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage message, System.Type targetClass) -> object
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage(Steeltoe.Messaging.IMessage message, System.Type targetClass, object conversionHint) -> object
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage message) -> T
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.FromMessage<T>(Steeltoe.Messaging.IMessage message, object conversionHint) -> T
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.RemoveDelegate(string contentType) -> Steeltoe.Messaging.Converter.ISmartMessageConverter
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName.get -> string
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ServiceName.set -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(object payload, Steeltoe.Messaging.IMessageHeaders headers) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.ToMessage(object payload, Steeltoe.Messaging.IMessageHeaders headers, object conversionHint) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.AssumeSupportedContentType.get -> bool
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.AssumeSupportedContentType.set -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.DefaultCharset.get -> System.Text.Encoding
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.DefaultCharset.set -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.JsonMessageConverter(Microsoft.Extensions.Logging.ILogger<Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter> logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.Precedence.get -> Steeltoe.Messaging.Converter.TypePrecedence
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.Precedence.set -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.Settings.get -> Newtonsoft.Json.JsonSerializerSettings
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.Settings.set -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.SupportedContentType.get -> Steeltoe.Common.Util.MimeType
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.SupportedContentType.set -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.TypeMapper.get -> Steeltoe.Messaging.Converter.ITypeMapper
Steeltoe.Messaging.RabbitMQ.Support.Converter.JsonMessageConverter.TypeMapper.set -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter
Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter.DefaultCharset.get -> string
Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter.DefaultCharset.set -> void
Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter.SimpleMessageConverter(Microsoft.Extensions.Logging.ILogger<Steeltoe.Messaging.RabbitMQ.Support.Converter.SimpleMessageConverter> logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Support.DefaultMessageHeadersConverter
Steeltoe.Messaging.RabbitMQ.Support.DefaultMessageHeadersConverter.DefaultMessageHeadersConverter(int longStringLimit) -> void
Steeltoe.Messaging.RabbitMQ.Support.DefaultMessageHeadersConverter.DefaultMessageHeadersConverter(int longStringLimit, bool convertLongLongStrings) -> void
Steeltoe.Messaging.RabbitMQ.Support.DefaultMessageHeadersConverter.DefaultMessageHeadersConverter(Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Support.Delivery
Steeltoe.Messaging.RabbitMQ.Support.Delivery.Body.get -> byte[]
Steeltoe.Messaging.RabbitMQ.Support.Delivery.ConsumerTag.get -> string
Steeltoe.Messaging.RabbitMQ.Support.Delivery.Delivery(string consumerTag, Steeltoe.Messaging.RabbitMQ.Core.Envelope envelope, RabbitMQ.Client.IBasicProperties properties, byte[] body, string queue) -> void
Steeltoe.Messaging.RabbitMQ.Support.Delivery.Envelope.get -> Steeltoe.Messaging.RabbitMQ.Core.Envelope
Steeltoe.Messaging.RabbitMQ.Support.Delivery.Properties.get -> RabbitMQ.Client.IBasicProperties
Steeltoe.Messaging.RabbitMQ.Support.Delivery.Queue.get -> string
Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware
Steeltoe.Messaging.RabbitMQ.Support.IListenerContainerAware.GetExpectedQueueNames() -> System.Collections.Generic.List<string>
Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter
Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter.FromMessageHeaders(Steeltoe.Messaging.IMessageHeaders source, RabbitMQ.Client.IBasicProperties target, System.Text.Encoding charset) -> void
Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter.ToMessageHeaders(RabbitMQ.Client.IBasicProperties source, Steeltoe.Messaging.RabbitMQ.Core.Envelope envelope, System.Text.Encoding charset) -> Steeltoe.Messaging.IMessageHeaders
Steeltoe.Messaging.RabbitMQ.Support.MessagePostProcessorUtils
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.AbstractCompressingPostProcessor(bool autoDecompress, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.AbstractCompressingPostProcessor(Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.AutoDecompress.get -> bool
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.CopyHeaders.get -> bool
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.CopyHeaders.set -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.Order.get -> int
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.Order.set -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.PostProcessMessage(Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlation) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor.AbstractDecompressingPostProcessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor.AbstractDecompressingPostProcessor(bool alwaysDecompress) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor.AlwaysDecompress.get -> bool
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor.Order.get -> int
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor.Order.set -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor.PostProcessMessage(Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlation) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDeflaterPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDeflaterPostProcessor.AbstractDeflaterPostProcessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDeflaterPostProcessor.AbstractDeflaterPostProcessor(bool autoDecompress) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DeflaterPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DeflaterPostProcessor.DeflaterPostProcessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DeflaterPostProcessor.DeflaterPostProcessor(bool autoDecompress) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DelegatingDecompressingPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DelegatingDecompressingPostProcessor.AddDecompressor(string contentEncoding, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor decompressor) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DelegatingDecompressingPostProcessor.DelegatingDecompressingPostProcessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DelegatingDecompressingPostProcessor.Order.get -> int
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DelegatingDecompressingPostProcessor.Order.set -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DelegatingDecompressingPostProcessor.PostProcessMessage(Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DelegatingDecompressingPostProcessor.PostProcessMessage(Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlation) -> Steeltoe.Messaging.IMessage
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DelegatingDecompressingPostProcessor.RemoveDecompressor(string contentEncoding) -> Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.DelegatingDecompressingPostProcessor.SetDecompressors(System.Collections.Generic.Dictionary<string, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor> decompressors) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GUnzipPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GUnzipPostProcessor.GUnzipPostProcessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GUnzipPostProcessor.GUnzipPostProcessor(bool alwaysDecompress) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GZipPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GZipPostProcessor.GZipPostProcessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.GZipPostProcessor.GZipPostProcessor(bool autoDecompress) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.InflaterPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.InflaterPostProcessor.InflaterPostProcessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.InflaterPostProcessor.InflaterPostProcessor(bool autoDecompress) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.UnzipPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.UnzipPostProcessor.UnzipPostProcessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.UnzipPostProcessor.UnzipPostProcessor(bool alwaysDecompress) -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.ZipPostProcessor
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.ZipPostProcessor.ZipPostProcessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.ZipPostProcessor.ZipPostProcessor(bool autoDecompress) -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitExceptionTranslator
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.AppId.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.AppId.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ClusterId.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ClusterId.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ConsumerQueue.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ConsumerQueue.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ConsumerTag.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ConsumerTag.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ContentEncoding.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ContentEncoding.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ContentLength.get -> long?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ContentLength.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.CorrelationId.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.CorrelationId.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.CreateMutableAccessor(Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.CreateMutableAccessor(Steeltoe.Messaging.IMessageHeaders messageHeaders) -> Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Delay.get -> int?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Delay.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.DeliveryMode.get -> Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.DeliveryMode.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.DeliveryTag.get -> ulong?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.DeliveryTag.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Expiration.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Expiration.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.FinalRetryForMessageWithNoId.get -> bool?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.FinalRetryForMessageWithNoId.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.GetXDeathHeader() -> System.Collections.Generic.List<System.Collections.Generic.Dictionary<string, object>>
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.InferredArgumentType.get -> System.Type
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.InferredArgumentType.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.IsContentLengthSet.get -> bool
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.IsDeliveryTagSet.get -> bool
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.IsFinalRetryForMessageWithNoId.get -> bool
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.LastInBatch.get -> bool?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.LastInBatch.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.MessageCount.get -> uint?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.MessageCount.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.MessageId.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.MessageId.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Priority.get -> int?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Priority.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.PublishSequenceNumber.get -> ulong?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.PublishSequenceNumber.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.RabbitAccessorMessageHeaders
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.RabbitAccessorMessageHeaders.Accessor.get -> Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.RabbitAccessorMessageHeaders.RabbitAccessorMessageHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor accessor, Steeltoe.Messaging.MessageHeaders headers) -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.RabbitAccessorMessageHeaders.RabbitAccessorMessageHeaders(Steeltoe.Messaging.Support.MessageHeaderAccessor accessor, System.Collections.Generic.IDictionary<string, object> headers) -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.RabbitHeaderAccessor() -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.RabbitHeaderAccessor(Steeltoe.Messaging.IMessage message) -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.RabbitHeaderAccessor(Steeltoe.Messaging.MessageHeaders headers) -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedDelay.get -> int?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedDelay.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedDeliveryMode.get -> Steeltoe.Messaging.RabbitMQ.Core.MessageDeliveryMode?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedDeliveryMode.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedExchange.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedExchange.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedRoutingKey.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedRoutingKey.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedUserId.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReceivedUserId.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Redelivered.get -> bool?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Redelivered.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReplyTo.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReplyTo.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReplyToAddress.get -> Steeltoe.Messaging.RabbitMQ.Core.Address
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.ReplyToAddress.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Target.get -> object
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Target.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.TargetMethod.get -> System.Reflection.MethodInfo
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.TargetMethod.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Timestamp.get -> long?
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Timestamp.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Type.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.Type.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.UserId.get -> string
Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor.UserId.set -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder
Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>
Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder() -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder(P payload, Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor accessor) -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder(Steeltoe.Messaging.IMessage message) -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder(Steeltoe.Messaging.IMessage<P> message) -> void
Steeltoe.Messaging.RabbitMQ.Support.RabbitMessageBuilder<P>.RabbitMessageBuilder(Steeltoe.Messaging.RabbitMQ.Support.RabbitHeaderAccessor accessor) -> void
Steeltoe.Messaging.RabbitMQ.Support.SendRetryContextAccessor
Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException
Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException.Args.get -> RabbitMQ.Client.ShutdownEventArgs
Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException.Cause.get -> object
Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException.ClassId.get -> ushort
Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException.Initiator.get -> RabbitMQ.Client.ShutdownInitiator
Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException.MethodId.get -> ushort
Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException.ReplyCode.get -> ushort
Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException.ReplyText.get -> string
Steeltoe.Messaging.RabbitMQ.Support.ShutdownSignalException.ShutdownSignalException(RabbitMQ.Client.ShutdownEventArgs args) -> void
Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager
Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.ConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.ConnectionFactory.set -> void
Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.RabbitTransactionManager() -> void
Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.RabbitTransactionManager(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory, Microsoft.Extensions.Logging.ILogger logger = null) -> void
Steeltoe.Messaging.RabbitMQ.Transaction.RabbitTransactionManager.ResourceFactory.get -> object
Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<T>
Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<T>.ActiveObjectCounter() -> void
Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<T>.Add(T activeObject) -> void
Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<T>.Count.get -> int
Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<T>.Deactivate() -> void
Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<T>.IsActive.get -> bool
Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<T>.Release(T activeObject) -> void
Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<T>.Reset() -> void
Steeltoe.Messaging.RabbitMQ.Util.ActiveObjectCounter<T>.Wait(System.TimeSpan timeout) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Admin.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Admin.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Admins.get -> string[]
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Admins.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.AutoDelete.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.AutoDelete.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Declare.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Declare.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Durable.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Durable.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Exclusive.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.Exclusive.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.IgnoreDeclarationExceptions.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Attributes.DeclareQueueBase.IgnoreDeclarationExceptions.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Config.AbstractDeclarable.SetAdminsThatShouldDeclare(params object[] adminArgs) -> void
virtual Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.InitializeContainer(C instance, Steeltoe.Messaging.RabbitMQ.Listener.IRabbitListenerEndpoint endpoint) -> void
virtual Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ServiceName.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Config.AbstractRabbitListenerContainerFactory<C>.ServiceName.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.AbstractPublisherConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.AddChannelListener(Steeltoe.Messaging.RabbitMQ.Connection.IChannelListener listener) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.AddConnectionListener(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener connectionListener) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Addresses.get -> System.Collections.Generic.List<RabbitMQ.Client.AmqpTcpEndpoint>
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Addresses.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.BlockedListener.get -> Steeltoe.Messaging.RabbitMQ.Connection.IBlockedListener
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.BlockedListener.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ChannelListener.get -> Steeltoe.Messaging.RabbitMQ.Connection.IChannelListener
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ClearConnectionListeners() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.CloseTimeout.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.CloseTimeout.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ConnectionListener.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ConnectionShutdownCompleted(object sender, RabbitMQ.Client.ShutdownEventArgs args) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ConnectionTimeout.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ConnectionTimeout.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.CreateBareConnection() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Destroy() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Dispose() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.GetDefaultHostName() -> string
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.HasPublisherConnectionFactory.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Host.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Host.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.IsPublisherConfirms.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.IsPublisherConfirms.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.IsPublisherReturns.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.IsPublisherReturns.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.IsSimplePublisherConfirms.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.IsSimplePublisherConfirms.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ObtainNewConnectionName() -> string
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Password.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Password.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Port.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Port.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.PublisherConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.PublisherConnectionFactory.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.RabbitConnectionFactory.get -> RabbitMQ.Client.ConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.RecoveryListener.get -> Steeltoe.Messaging.RabbitMQ.Connection.IRecoveryListener
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.RecoveryListener.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.RemoveConnectionListener(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener connectionListener) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.RequestedHeartBeat.get -> ushort
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.RequestedHeartBeat.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ServiceName.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ServiceName.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.SetAddresses(string addresses) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.SetBlockedListener(Steeltoe.Messaging.RabbitMQ.Connection.IBlockedListener blockedListener) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.SetChannelListeners(System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Connection.IChannelListener> listeners) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.SetConnectionListeners(System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener> listeners) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.SetRecoveryListener(Steeltoe.Messaging.RabbitMQ.Connection.IRecoveryListener recoveryListener) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ShuffleAddresses.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.ShuffleAddresses.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Uri.get -> System.Uri
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Uri.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Username.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.Username.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.VirtualHost.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractConnectionFactory.VirtualHost.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.AddConnectionListener(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener listener) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.AddTargetConnectionFactory(object key, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.ClearConnectionListeners() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.CreateConnection() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.Destroy() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.DetermineTargetConnectionFactory() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.GetTargetConnectionFactory(object key) -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.RemoveConnectionListener(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionListener listener) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.RemoveTargetConnectionFactory(object key) -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Connection.AbstractRoutingConnectionFactory.SetTargetConnectionFactories(System.Collections.Generic.Dictionary<object, Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory> targetConnectionFactories) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Future.get -> System.Threading.Tasks.Task<Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Confirm>
virtual Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.FutureSource.get -> System.Threading.Tasks.TaskCompletionSource<Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Confirm>
virtual Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Id.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.Id.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.ReturnedMessage.get -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData.ReturnedMessage.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.Abort() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.Abort(ushort replyCode, string replyText) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.AddListener(Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener listener) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.AddPendingConfirm(Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener listener, ulong sequence, Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm pendingConfirm) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicAck(ulong deliveryTag, bool multiple) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicAcks -> System.EventHandler<RabbitMQ.Client.Events.BasicAckEventArgs>
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicCancel(string consumerTag) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicConsume(string queue, bool autoAck, string consumerTag, bool noLocal, bool exclusive, System.Collections.Generic.IDictionary<string, object> arguments, RabbitMQ.Client.IBasicConsumer consumer) -> string
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicGet(string queue, bool autoAck) -> RabbitMQ.Client.BasicGetResult
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicNack(ulong deliveryTag, bool multiple, bool requeue) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicNacks -> System.EventHandler<RabbitMQ.Client.Events.BasicNackEventArgs>
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicPublish(string exchange, string routingKey, bool mandatory, RabbitMQ.Client.IBasicProperties basicProperties, byte[] body) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicQos(uint prefetchSize, ushort prefetchCount, bool global) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicRecover(bool requeue) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicRecoverAsync(bool requeue) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicRecoverOk -> System.EventHandler<System.EventArgs>
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicReject(ulong deliveryTag, bool requeue) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.BasicReturn -> System.EventHandler<RabbitMQ.Client.Events.BasicReturnEventArgs>
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.CallbackException -> System.EventHandler<RabbitMQ.Client.Events.CallbackExceptionEventArgs>
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.Channel.get -> RabbitMQ.Client.IModel
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ChannelNumber.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.Close() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.Close(ushort replyCode, string replyText) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.CloseReason.get -> RabbitMQ.Client.ShutdownEventArgs
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ConfirmSelect() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ConsumerCount(string queue) -> uint
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ContinuationTimeout.get -> System.TimeSpan
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ContinuationTimeout.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.CreateBasicProperties() -> RabbitMQ.Client.IBasicProperties
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.CreateBasicPublishBatch() -> RabbitMQ.Client.IBasicPublishBatch
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.DefaultConsumer.get -> RabbitMQ.Client.IBasicConsumer
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.DefaultConsumer.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ExchangeBind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ExchangeBindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ExchangeDeclare(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ExchangeDeclareNoWait(string exchange, string type, bool durable, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ExchangeDeclarePassive(string exchange) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ExchangeDelete(string exchange, bool ifUnused) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ExchangeDeleteNoWait(string exchange, bool ifUnused) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ExchangeUnbind(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ExchangeUnbindNoWait(string destination, string source, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.Expire(Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener listener, long cutoffTime) -> System.Collections.Generic.IList<Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm>
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.FlowControl -> System.EventHandler<RabbitMQ.Client.Events.FlowControlEventArgs>
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.GetPendingConfirmsCount() -> int
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.GetPendingConfirmsCount(Steeltoe.Messaging.RabbitMQ.Connection.IPublisherCallbackChannel.IListener listener) -> int
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.IsClosed.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.IsOpen.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.MessageCount(string queue) -> uint
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.ModelShutdown -> System.EventHandler<RabbitMQ.Client.ShutdownEventArgs>
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.NextPublishSeqNo.get -> ulong
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.QueueBind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.QueueBindNoWait(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.QueueDeclare(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> RabbitMQ.Client.QueueDeclareOk
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.QueueDeclareNoWait(string queue, bool durable, bool exclusive, bool autoDelete, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.QueueDeclarePassive(string queue) -> RabbitMQ.Client.QueueDeclareOk
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.QueueDelete(string queue, bool ifUnused, bool ifEmpty) -> uint
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.QueueDeleteNoWait(string queue, bool ifUnused, bool ifEmpty) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.QueuePurge(string queue) -> uint
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.QueueUnbind(string queue, string exchange, string routingKey, System.Collections.Generic.IDictionary<string, object> arguments) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.SetAfterAckCallback(System.Action<RabbitMQ.Client.IModel> callback) -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.TxCommit() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.TxRollback() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.TxSelect() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.WaitForConfirms() -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.WaitForConfirms(System.TimeSpan timeout) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.WaitForConfirms(System.TimeSpan timeout, out bool timedOut) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.WaitForConfirmsOrDie() -> void
virtual Steeltoe.Messaging.RabbitMQ.Connection.PublisherCallbackChannel.WaitForConfirmsOrDie(System.TimeSpan timeout) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddAfterReceivePostProcessors(params Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[] afterReceivePostProcessors) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddBeforePublishPostProcessors(params Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[] beforePublishPostProcessors) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AddListener(RabbitMQ.Client.IModel channel) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.AfterReceivePostProcessors.get -> System.Collections.Generic.IList<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.BeforePublishPostProcessors.get -> System.Collections.Generic.IList<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback.get -> Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IConfirmCallback
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmCallback.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConfirmListener.Remove() -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConnectionFactory.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode.get -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ContainerAckMode.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(string exchange, string routingKey, object message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(string routingKey, object message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSend(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(string exchange, string routingKey, object message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertAndSendAsync(string routingKey, object message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertMessageIfNecessary(object message) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertRabbitAccessException(System.Exception ex) -> System.Exception
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(string exchange, string routingKey, object message) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(string routingKey, object message) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceive<T>(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(object message, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(string exchange, string routingKey, object message, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsType(string routingKey, object message, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(object message, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(string exchange, string routingKey, object message, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsTypeAsync(string routingKey, object message, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(string exchange, string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(string exchange, string routingKey, object message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(string routingKey, object message, Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor messagePostProcessor, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ConvertSendAndReceiveAsync<T>(string routingKey, object message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationConvertAndSend(object message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor.get -> Steeltoe.Messaging.RabbitMQ.Core.ICorrelationDataPostProcessor
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationDataPostProcessor.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CorrelationKey.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.CreateConnection() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DefaultReceiveQueue.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DetermineConfirmsReturnsCapability(Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory connectionFactory) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Dispose() -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceive(string queueName, int timeoutMillis, System.Threading.CancellationToken cancellationToken) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveAndConvert(string queueName, int timeoutMillis, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoReceiveNoWait(string queueName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSend(RabbitMQ.Client.IModel channel, string exchangeArg, string routingKeyArg, Steeltoe.Messaging.IMessage message, bool mandatory, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceive(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithDirect(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithFixed(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoSendAndReceiveWithTemporary(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStart() -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.DoStop() -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding.get -> System.Text.Encoding
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Encoding.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext.get -> Steeltoe.Common.Expression.Internal.IEvaluationContext
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.EvaluationContext.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Exchange.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute(System.Action<RabbitMQ.Client.IModel> action) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Execute<T>(System.Func<RabbitMQ.Client.IModel, T> action) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultExchange() -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetDefaultRoutingKey() -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetExpectedQueueNames() -> System.Collections.Generic.List<string>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetTransactionalResourceHolder() -> Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmed(long age) -> System.Collections.Generic.ICollection<Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.GetUnconfirmedCount() -> int
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleConfirm(Steeltoe.Messaging.RabbitMQ.Connection.PendingConfirm pendingConfirm, bool ack) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.HandleReturn(int replyCode, string replyText, string exchange, string routingKey, RabbitMQ.Client.IBasicProperties properties, byte[] body) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T> rabbitOperations) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Invoke<T>(System.Func<Steeltoe.Messaging.RabbitMQ.Core.IRabbitTemplate, T> rabbitOperations, System.Action<object, RabbitMQ.Client.Events.BasicAckEventArgs> acks, System.Action<object, RabbitMQ.Client.Events.BasicNackEventArgs> nacks) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelLocallyTransacted(RabbitMQ.Client.IModel channel) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsChannelTransacted.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsConfirmListener.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsMandatoryFor(Steeltoe.Messaging.IMessage message) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsReturnListener.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IsRunning.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Mandatory.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression.get -> Steeltoe.Common.Expression.Internal.IExpression
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpression.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MandatoryExpressionString.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter.get -> Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.MessagePropertiesConverter.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.NoLocalReplyConsumer.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessage(Steeltoe.Messaging.IMessage message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.OnMessageBatch(System.Collections.Generic.List<Steeltoe.Messaging.IMessage> messages) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.CompleteExceptionally(System.Exception exception) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.Get() -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.Get(int timeout) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.Reply(Steeltoe.Messaging.IMessage reply) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.Returned(Steeltoe.Messaging.RabbitMQ.Exceptions.RabbitMessageReturnedException e) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.SavedCorrelation.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.SavedCorrelation.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.SavedReplyTo.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.PendingReply.SavedReplyTo.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(int timeoutMillis) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(string queueName) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Receive(string queueName, int timeoutMillis) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(int timeoutMillis, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(string queueName, int timeoutMillis, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(string queueName, System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert(System.Type type) -> object
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert<T>(int timeoutMillis) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert<T>(string queueName) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvert<T>(string queueName, int timeoutMillis) -> T
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(int timeoutMillis, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(string queueName, int timeoutMillis, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(string queueName, System.Type type, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync(System.Type type, System.Threading.CancellationToken cancellation = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<object>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync<T>(int timeoutMillis, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync<T>(string queueName, int timeoutMillis, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndConvertAsync<T>(string queueName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<T>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(string queueName, System.Func<R, S> callback) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(string queueName, System.Func<R, S> callback, string replyExchange, string replyRoutingKey) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(string queueName, System.Func<R, S> callback, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address> replyToAddressCallback) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S> callback) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S> callback, string exchange, string routingKey) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAndReply<R, S>(System.Func<R, S> callback, System.Func<Steeltoe.Messaging.IMessage, S, Steeltoe.Messaging.RabbitMQ.Core.Address> replyToAddressCallback) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(int timeoutMillis, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(string queueName, int timeoutMillis, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveAsync(string queueName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression.get -> Steeltoe.Common.Expression.Internal.IExpression
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveConnectionFactorySelectorExpression.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReceiveTimeout.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback.get -> Steeltoe.Common.Retry.IRecoveryCallback
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RecoveryCallback.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveAfterReceivePostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor afterReceivePostProcessor) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RemoveBeforePublishPostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor beforePublishPostProcessor) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyAddress.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler.get -> Steeltoe.Common.Util.IErrorHandler
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyErrorHandler.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimedOut(string correlationId) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReplyTimeout.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate.get -> Steeltoe.Common.Retry.IRetryOperation
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RetryTemplate.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback.get -> Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.IReturnCallback
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ReturnCallback.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Revoke(RabbitMQ.Client.IModel channel) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.RoutingKey.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(string exchange, string routingKey, Steeltoe.Messaging.IMessage message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Send(string routingKey, Steeltoe.Messaging.IMessage message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(string exchange, string routingKey, Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(string routingKey, Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceive(string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAndReceiveAsync(string routingKey, Steeltoe.Messaging.IMessage message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task<Steeltoe.Messaging.IMessage>
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, Steeltoe.Messaging.RabbitMQ.Connection.CorrelationData correlationData, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(string exchange, string routingKey, Steeltoe.Messaging.IMessage message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendAsync(string routingKey, Steeltoe.Messaging.IMessage message, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken)) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression.get -> Steeltoe.Common.Expression.Internal.IExpression
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendConnectionFactorySelectorExpression.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SendToRabbit(RabbitMQ.Client.IModel channel, string exchange, string routingKey, bool mandatory, Steeltoe.Messaging.IMessage message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.ServiceName.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetAfterReceivePostProcessors(params Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[] afterReceivePostProcessors) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.SetBeforePublishPostProcessors(params Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[] beforePublishPostProcessors) -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Start() -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.Stop() -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyTo() -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseDirectReplyToContainer.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UsePublisherConnection.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserCorrelationId.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression.get -> Steeltoe.Common.Expression.Internal.IExpression
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpression.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UserIdExpressionString.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UseTemporaryReplyQueues.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.UUID.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirms(int timeoutInMilliseconds) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Core.RabbitTemplate.WaitForConfirmsOrDie(int timeoutInMilliseconds) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AcknowledgeMode.get -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AcknowledgeMode.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ActualInvokeListener(RabbitMQ.Client.IModel channel, Steeltoe.Messaging.IMessage message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ActualInvokeListener(RabbitMQ.Client.IModel channel, System.Collections.Generic.List<Steeltoe.Messaging.IMessage> data) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AddAfterReceivePostProcessors(params Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[] afterReceivePostProcessors) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AddQueueNames(params string[] queueNames) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AddQueues(params Steeltoe.Messaging.RabbitMQ.Config.IQueue[] queues) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AfterReceivePostProcessors.get -> System.Collections.Generic.IList<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor>
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AlwaysRequeueWithTxManagerRollback.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AlwaysRequeueWithTxManagerRollback.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AutoDeclare.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.AutoDeclare.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.BatchingStrategy.get -> Steeltoe.Messaging.RabbitMQ.Batch.IBatchingStrategy
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.BatchingStrategy.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.CauseChainHasImmediateAcknowledgeRabbitException(System.Exception exception) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.CheckMessageListener(object listener) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.CheckMismatchedQueues() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ConfigureAdminIfNeeded() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ConnectionFactory.get -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ConnectionFactory.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ConsumerArguments.get -> System.Collections.Generic.Dictionary<string, object>
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ConsumerArguments.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ConsumerTagStrategy.get -> Steeltoe.Messaging.RabbitMQ.Core.IConsumerTagStrategy
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ConsumerTagStrategy.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ConvertRabbitAccessException(System.Exception ex) -> System.Exception
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.CreateConnection() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnection
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DefaultRequeueRejected.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DefaultRequeueRejected.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Dispose() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DoInvokeListener(Steeltoe.Messaging.RabbitMQ.Listener.IChannelAwareMessageListener listener, RabbitMQ.Client.IModel channel, Steeltoe.Messaging.IMessage message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DoInvokeListener(Steeltoe.Messaging.RabbitMQ.Listener.IChannelAwareMessageListener listener, RabbitMQ.Client.IModel channel, System.Collections.Generic.List<Steeltoe.Messaging.IMessage> data) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DoInvokeListener(Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener listener, Steeltoe.Messaging.IMessage message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DoInvokeListener(Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener listener, System.Collections.Generic.List<Steeltoe.Messaging.IMessage> data) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DoStart() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.DoStop() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ErrorHandler.get -> Steeltoe.Common.Util.IErrorHandler
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ErrorHandler.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Exclusive.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Exclusive.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ExclusiveConsumerExceptionLogger.get -> Steeltoe.Messaging.RabbitMQ.Core.IConditionalExceptionLogger
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ExclusiveConsumerExceptionLogger.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ExecuteListener(RabbitMQ.Client.IModel channel, Steeltoe.Messaging.IMessage message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ExposeListenerChannel.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ExposeListenerChannel.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.FailedDeclarationRetryInterval.get -> long
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.FailedDeclarationRetryInterval.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ForceCloseChannel.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ForceCloseChannel.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.GetConnectionFactory() -> Steeltoe.Messaging.RabbitMQ.Connection.IConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.GetQueueNames() -> string[]
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.GetQueueNamesAsSet() -> System.Collections.Generic.ISet<string>
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.GetQueueNamesToQueues() -> System.Collections.Generic.Dictionary<string, Steeltoe.Messaging.RabbitMQ.Config.IQueue>
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.GetRoutingConnectionFactory() -> Steeltoe.Messaging.RabbitMQ.Connection.IRoutingConnectionFactory
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.GetRoutingLookupKey() -> string
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.GetTransactionalResourceHolder() -> Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.HandleChannelAwareTransaction(RabbitMQ.Client.IModel channel, out RabbitMQ.Client.IModel channelToUse, out Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder resourceHolder) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.HandleListenerException(System.Exception exception) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IdleEventInterval.get -> long
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IdleEventInterval.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Initialize() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Initialized.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.InvokeErrorHandler(System.Exception ex) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsActive.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsAutoStartup.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsAutoStartup.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsChannelLocallyTransacted.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsChannelTransacted.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsChannelTransacted.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsDeBatchingEnabled.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsDeBatchingEnabled.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsLazyLoad.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.IsRunning.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.LastReceive.get -> long
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.LazyLoad() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ListenerId.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ListenerId.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.LookupKeyQualifier.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.LookupKeyQualifier.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.MessageHeadersConverter.get -> Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.MessageHeadersConverter.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.MessageListener.get -> Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.MessageListener.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.MismatchedQueuesFatal.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.MismatchedQueuesFatal.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.MissingQueuesFatal.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.MissingQueuesFatal.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.NoLocal.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.NoLocal.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Phase.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Phase.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.PossibleAuthenticationFailureFatal.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.PossibleAuthenticationFailureFatal.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.PrefetchCount.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.PrefetchCount.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.PrepareHolderForRollback(Steeltoe.Messaging.RabbitMQ.Connection.RabbitResourceHolder resourceHolder, System.Exception exception) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RabbitAdmin.get -> Steeltoe.Messaging.RabbitMQ.Core.IRabbitAdmin
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RabbitAdmin.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RecoveryInterval.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RecoveryInterval.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RedeclareElementsIfNecessary() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RemoveAfterReceivePostProcessor(Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor afterReceivePostProcessor) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RemoveQueueNames(params string[] queueNames) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.RemoveQueues(params Steeltoe.Messaging.RabbitMQ.Config.IQueue[] queues) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ServiceName.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ServiceName.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.SetAfterReceivePostProcessors(params Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[] afterReceivePostProcessors) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.SetQueueNames(params string[] queueNames) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.SetQueues(params Steeltoe.Messaging.RabbitMQ.Config.IQueue[] queues) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.SetupMessageListener(Steeltoe.Messaging.RabbitMQ.Listener.IMessageListener messageListener) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Shutdown() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ShutdownTimeout.get -> long
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ShutdownTimeout.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Start() -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.StatefulRetryFatalWithNullMessageId.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.StatefulRetryFatalWithNullMessageId.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Stop() -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.Stop(System.Action callback) -> System.Threading.Tasks.Task
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.TransactionAttribute.get -> Steeltoe.Common.Transaction.ITransactionAttribute
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.TransactionAttribute.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.TransactionManager.get -> Steeltoe.Common.Transaction.IPlatformTransactionManager
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.TransactionManager.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.UpdateLastReceive() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.ValidateConfiguration() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.WrapToListenerExecutionFailedExceptionIfNeeded(System.Exception exception, Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.ListenerExecutionFailedException
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractMessageListenerContainer.WrapToListenerExecutionFailedExceptionIfNeeded(System.Exception exception, System.Collections.Generic.List<Steeltoe.Messaging.IMessage> data) -> Steeltoe.Messaging.RabbitMQ.Listener.Exceptions.ListenerExecutionFailedException
virtual Steeltoe.Messaging.RabbitMQ.Listener.AbstractRabbitListenerEndpoint.GetEndpointDescription() -> System.Text.StringBuilder
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.BeforeSendReplyPostProcessors.get -> System.Collections.Generic.List<Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor>
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.BuildMessage(RabbitMQ.Client.IModel channel, object result, System.Type genericType) -> Steeltoe.Messaging.IMessage<byte[]>
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ContainerAckMode.get -> Steeltoe.Messaging.RabbitMQ.Core.AcknowledgeMode
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ContainerAckMode.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.DefaultRequeueRejected.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.DefaultRequeueRejected.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.DoHandleResult(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult resultArg, Steeltoe.Messaging.IMessage request, RabbitMQ.Client.IModel channel, object source) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.DoPublish(RabbitMQ.Client.IModel channel, Steeltoe.Messaging.RabbitMQ.Core.Address replyTo, Steeltoe.Messaging.IMessage<byte[]> message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.Encoding.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.Encoding.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.EvalContext.get -> Steeltoe.Common.Expression.Internal.Spring.Support.StandardEvaluationContext
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.EvalContext.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ExtractMessage(Steeltoe.Messaging.IMessage message) -> object
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.GetReceivedExchange(Steeltoe.Messaging.IMessage request) -> string
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.GetReplyToAddress(Steeltoe.Messaging.IMessage request, object source, Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult result) -> Steeltoe.Messaging.RabbitMQ.Core.Address
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.HandleListenerException(System.Exception exception) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.HandleResult(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult resultArg, Steeltoe.Messaging.IMessage request, RabbitMQ.Client.IModel channel) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.HandleResult(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.InvocationResult resultArg, Steeltoe.Messaging.IMessage request, RabbitMQ.Client.IModel channel, object source) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.IsManualAck.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.MandatoryPublish.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.MandatoryPublish.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.MessageConverter.get -> Steeltoe.Messaging.Converter.ISmartMessageConverter
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.MessageConverter.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.MessagePropertiesConverter.get -> Steeltoe.Messaging.RabbitMQ.Support.IMessageHeadersConverter
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.MessagePropertiesConverter.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.OnMessage(Steeltoe.Messaging.IMessage message) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.OnMessageBatch(System.Collections.Generic.List<Steeltoe.Messaging.IMessage> messages) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.OnMessageBatch(System.Collections.Generic.List<Steeltoe.Messaging.IMessage> messages, RabbitMQ.Client.IModel channel) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.PostProcessChannel(RabbitMQ.Client.IModel channel, Steeltoe.Messaging.IMessage response) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.PostProcessResponse(Steeltoe.Messaging.IMessage request, Steeltoe.Messaging.IMessage response) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.RecoveryCallback.get -> Steeltoe.Common.Retry.IRecoveryCallback
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.RecoveryCallback.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ReplyPostProcessor.get -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.IReplyPostProcessor
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ReplyPostProcessor.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ResponseAddress.get -> Steeltoe.Messaging.RabbitMQ.Core.Address
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ResponseAddress.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ResponseExchange.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ResponseExchange.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ResponseExpression.get -> Steeltoe.Common.Expression.Internal.IExpression
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ResponseExpression.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ResponseRoutingKey.get -> string
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.ResponseRoutingKey.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.RetryTemplate.get -> Steeltoe.Common.Retry.RetryTemplate
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.RetryTemplate.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.SetBeforeSendReplyPostProcessors(params Steeltoe.Messaging.RabbitMQ.Core.IMessagePostProcessor[] beforeSendReplyPostProcessors) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.AbstractMessageListenerAdapter.SetResponseAddress(string defaultReplyTo) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.DelegatingInvocableHandler.FindHandlerForPayload(System.Type payloadClass) -> Steeltoe.Messaging.Handler.Invocation.IInvocableHandlerMethod
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.BuildListenerArguments(object extractedMessage) -> object[]
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.BuildListenerArguments(object extractedMessage, RabbitMQ.Client.IModel channel, Steeltoe.Messaging.IMessage message) -> object[]
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.GetListenerMethodName(Steeltoe.Messaging.IMessage originalMessage, object extractedMessage) -> string
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessageListenerAdapter.InvokeListenerMethod(string methodName, object[] arguments, Steeltoe.Messaging.IMessage originalMessage) -> object
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.Instance.get -> object
virtual Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter.Method.get -> System.Reflection.MethodInfo
virtual Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.CauseChainContainsRRADRE(System.Exception exception) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.DiscardFatalsWithXDeath.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.DiscardFatalsWithXDeath.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.HandleError(System.Exception exception) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.RejectManual.get -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.ConditionalRejectingErrorHandler.RejectManual.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.DefaultExceptionStrategy.IsUserCauseFatal(System.Exception cause) -> bool
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.AckTimeout.get -> long
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.AckTimeout.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.ActualStart() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.ConsumerRemoved(Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.SimpleConsumer consumer) -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.ConsumersPerQueue.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.ConsumersPerQueue.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.DoRedeclareElementsIfNecessary() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.FindIdleConsumer() -> int
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.LastRestartAttempt.get -> long
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.MessagesPerAck.get -> int
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.MessagesPerAck.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.MonitorInterval.get -> long
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.MonitorInterval.set -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.DirectMessageListenerContainer.ProcessMonitorTask() -> void
virtual Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.ConfigureListenerAdapter(Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter messageListener) -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.HandlerAdapter
virtual Steeltoe.Messaging.RabbitMQ.Listener.MethodRabbitListenerEndpoint.CreateMessageListenerInstance() -> Steeltoe.Messaging.RabbitMQ.Listener.Adapters.MessagingMessageListenerAdapter
virtual Steeltoe.Messaging.RabbitMQ.Retry.RepublishMessageRecoverer.AddAdditionalHeaders(Steeltoe.Messaging.IMessage message, System.Exception cause) -> System.Collections.Generic.Dictionary<string, object>
virtual Steeltoe.Messaging.RabbitMQ.Support.Converter.AbstractMessageConverter.CreateMessage(object payload, Steeltoe.Messaging.IMessageHeaders messageProperties) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Support.Converter.ContentTypeDelegatingMessageConverter.GetConverterForContentType(string contentType) -> Steeltoe.Messaging.Converter.ISmartMessageConverter
virtual Steeltoe.Messaging.RabbitMQ.Support.DefaultMessageHeadersConverter.FromMessageHeaders(Steeltoe.Messaging.IMessageHeaders headers, RabbitMQ.Client.IBasicProperties target, System.Text.Encoding charset) -> void
virtual Steeltoe.Messaging.RabbitMQ.Support.DefaultMessageHeadersConverter.ToMessageHeaders(RabbitMQ.Client.IBasicProperties source, Steeltoe.Messaging.RabbitMQ.Core.Envelope envelope, System.Text.Encoding charset) -> Steeltoe.Messaging.IMessageHeaders
virtual Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.CreateMessage(Steeltoe.Messaging.IMessage message, byte[] compressed) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractCompressingPostProcessor.PostProcessMessage(Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDecompressingPostProcessor.PostProcessMessage(Steeltoe.Messaging.IMessage message) -> Steeltoe.Messaging.IMessage
virtual Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDeflaterPostProcessor.Level.get -> System.IO.Compression.CompressionLevel
virtual Steeltoe.Messaging.RabbitMQ.Support.PostProcessor.AbstractDeflaterPostProcessor.Level.set -> void